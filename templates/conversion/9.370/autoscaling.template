{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Scalable UTM cloud formation template. Please make sure that the VPC has a Gateway attached.",
  "Parameters": {
    "basicAdminEmail": {
      "Default": "",
      "Description": "UTM admin email",
      "Type": "String"
    },
    "awsAMI": {
      "Description": "The UTM AMI with cloud capabilities. With autodetect latest ami is used based on the license type",
      "Type": "String",
      "Default": "autodetect"
    },
    "awsLicenseType": {
      "Description": "Bring your own license or hourly billing licensing type. This parameter has no effect, If the awsAMI parameter is set to an AMI ID.",
      "Type": "String",
      "AllowedValues": [
        "Hourly",
        "BYOL"
      ],
      "Default": "Hourly"
    },
    "basicHostname": {
      "Description": "The hostname field can have a maximum of 64 characters. Hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number.",
      "Type": "String",
      "MaxLength": "64",
      "AllowedPattern": "^[0-9A-Za-z]{1}([A-Za-z0-9.-]*)$",
      "ConstraintDescription": "Invalid hostname. The hostname field can have a maximum of 64 characters. Hostname can only contain lower- and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number."
    },
    "basicCity": {
      "Description": "City",
      "Type": "String"
    },
    "basicCountry": {
      "Description": "Country",
      "Type": "String",
      "AllowedValues": [
        "Andorra",
        "United Arab Emirates",
        "Afghanistan",
        "Antigua and Barbuda",
        "Anguilla",
        "Albania",
        "Armenia",
        "Netherlands Antilles",
        "Angola",
        "Antarctica",
        "Argentina",
        "American Samoa",
        "Austria",
        "Australia",
        "Aland Islands",
        "Aruba",
        "Azerbaidjan",
        "Bosnia and Herzegovina",
        "Barbados",
        "Bangladesh",
        "Belgium",
        "Burkina Faso",
        "Bulgaria",
        "Bahrain",
        "Burundi",
        "Benin",
        "Saint Barthelemey",
        "Bermuda",
        "Brunei Darussalam",
        "Bolivia",
        "Brazil",
        "Bahamas",
        "Bhutan",
        "Bouvet Island",
        "Botswana",
        "Belarus",
        "Belize",
        "Canada",
        "Cocos Islands",
        "Congo, Democratic Rebpulic of the",
        "Central African Republic",
        "Congo",
        "Switzerland",
        "Ivory Coast",
        "Cook Islands",
        "Chile",
        "Cameroon",
        "China",
        "Colombia",
        "Costa Rica",
        "Cuba",
        "Cape Verde",
        "Christmas Island",
        "Cyprus",
        "Czech Republic",
        "Germany",
        "Djibouti",
        "Denmark",
        "Dominica",
        "Dominican Republic",
        "Algeria",
        "Ecuador",
        "Estonia",
        "Egypt",
        "Western Sahara",
        "Eritrea",
        "Spain",
        "Ethiopia",
        "Finland",
        "Fiji",
        "Falkland Islands",
        "Micronesia",
        "Faroe Islands",
        "France",
        "Gabon",
        "Great Britain",
        "Grenada",
        "Georgia",
        "French Guyana",
        "Guernsey",
        "Ghana",
        "Gibraltar",
        "Greenland",
        " Gambia",
        "Guinea",
        "Guadeloupe",
        "Equatorial Guinea",
        "Greece",
        "S. Georgia & S. Sandwich Isls.",
        "Guatemala",
        "Guam (USA)",
        "Guinea Bissau",
        "Guyana",
        "Hong Kong",
        "Heard and McDonald Islands",
        "Honduras",
        "Croatia",
        "Haiti",
        "Hungary",
        "Indonesia",
        "Ireland",
        "Israel",
        "Isle of Man",
        "India",
        "British Indian Ocean Territory",
        "Iraq",
        "Iran",
        "Iceland",
        "Italy",
        "Jersey",
        "Jamaica",
        "Jordan",
        "Japan",
        "Kenya",
        "Kyrgyz Republic (Kyrgyzstan)",
        "Cambodia, Kingdom of",
        "Kiribati",
        "Comoros",
        "Saint Kitts & Nevis Anguilla",
        "North Korea",
        "South Korea",
        "Kuwait",
        "Cayman Islands",
        "Kazakhstan",
        "Laos",
        "Lebanon",
        "Saint Lucia",
        "Liechtenstein",
        "Sri Lanka",
        "Liberia",
        "Lesotho",
        "Lithuania",
        "Luxembourg",
        "Latvia",
        "Libya",
        "Morocco",
        "Monaco",
        "Moldavia",
        "Montenegro",
        "Saint Martin (French)",
        "Madagascar",
        "Marshall Islands",
        "Macedonia",
        "Mali",
        "Myanmar",
        "Mongolia",
        "Macau",
        "Northern Mariana Islands",
        "Martinique (French)",
        "Mauritania",
        "Montserrat",
        "Malta",
        "Mauritius",
        "Maldives",
        "Malawi",
        "Mexico",
        "Malaysia",
        "Mozambique",
        "Namibia",
        "New Caledonia (French)",
        "Niger",
        "Norfolk Island",
        "Nigeria",
        "Nicaragua",
        "Netherlands",
        "Norway",
        "Nepal",
        "Nauru",
        "Niue",
        "New Zealand",
        "Oman",
        "Panama",
        "Peru",
        "Polynesia (French)",
        "Papua New Guinea",
        "Philippines",
        "Pakistan",
        "Poland",
        "Saint Pierre and Miquelon",
        "Pitcairn Island",
        "Puerto Rico",
        "Palestinian Territory (Occupied)",
        "Portugal",
        "Palau",
        "Paraguay",
        "Qatar",
        "Reunion (French)",
        "Romania",
        "Serbia",
        "Russian Federation",
        "Rwanda",
        "Saudi Arabia",
        "Solomon Islands",
        "Seychelles",
        "Sudan",
        "Sweden",
        "Singapore",
        "Saint Helena",
        "Slovenia",
        "Svalbard Jan Mayen Islands",
        "Slovak Republic",
        "Sierra Leone",
        "San Marino",
        "Senegal",
        "Somalia",
        "Suriname",
        "Saint Tome and Principe",
        "El Salvador",
        "Syria",
        "Swaziland",
        "Turks and Caicos Islands",
        "Chad",
        "French Southern Territories",
        "Togo",
        "Thailand",
        "Tadjikistan",
        "Tokelau",
        "Timor-Leste",
        "Turkmenistan",
        "Tunisia",
        "Tonga",
        "Turkey",
        "Trinidad and Tobago",
        "Tuvalu",
        "Taiwan",
        "Tanzania",
        "Ukraine",
        "Uganda",
        "United Kingdom",
        "USA Minor Outlying Islands",
        "United States",
        "Uruguay",
        "Uzbekistan",
        "Holy See (Vatican City State)",
        "Saint Vincent & Grenadines",
        "Venezuela",
        "Virgin Islands (British)",
        "Virgin Islands (USA)",
        "Vietnam",
        "Vanuatu",
        "Wallis and Futuna Islands",
        "Samoa",
        "Yemen",
        "Mayotte",
        "South Africa",
        "Zambia",
        "Zimbabwe"
      ]
    },
    "basicAdminPassword": {
      "Description": "UTM admin password",
      "Type": "String",
      "NoEcho": "True"
    },
    "basicOrganization": {
      "Description": "Name of your Organization",
      "Type": "String"
    },
    "awsKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },
    "awsVPCID": {
      "Description": "VPC to launch the deployment in.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "awsGatewayID": {
      "Description": "The Internet of the VPC.",
      "Type": "String"
    },
    "awsSubnetIPBlocks": {
      "Description": "Four subnet CIDR blocks with the VPC.",
      "Type": "CommaDelimitedList"
    },
    "awsAvailabilityZone1": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Please provide an Availability Zone."
    },
    "awsAvailabilityZone2": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Please provide another (different) Availability Zone."
    },
    "awsTrustedNetwork": {
      "Description": "Trusted network. Only connections from this network are allowed to ports 22 and 8080. E.g 92.198.130.0/24. To allow access from anywhere use 0.0.0.0/0",
      "Type": "String"
    },
    "optionalExistingS3Bucket": {
      "Description": "Optional. The S3 Bucket to store and restore backups. If left empty a new bucket will be created automatically.",
      "Type": "String",
      "Default": ""
    },
    "optionalExistingElasticIP": {
      "Description": "Optional. The Elastic IP to assign in the UTM instance. If left empty a new Elastic IP will be allocated automatically.",
      "Type": "String",
      "Default": ""
    },
    "optionalExistingSecurityGroup": {
      "Description": "Optional. A security group to assign to the new stack",
      "Type": "String",
      "Default": ""
    },
    "optionalLicensePool": {
      "Description": "Optional. S3 bucket where the licenses are stored",
      "Type": "String",
      "Default": ""
    }
  },
  "Mappings": {
    "RegionMap": {
      "eu-west-1": {
        "BYOL": "ami-7b9baf0c",
        "Hourly": "ami-43ac9934"
      },
      "ap-southeast-1": {
        "BYOL": "ami-b89187ea",
        "Hourly": "ami-5a3b2d08"
      },
      "ap-southeast-2": {
        "BYOL": "ami-af6e2695",
        "Hourly": "ami-8d2961b7"
      },
      "eu-central-1": {
        "BYOL": "ami-50acae4d",
        "Hourly": "ami-68f6f475"
      },
      "ap-northeast-1": {
        "BYOL": "ami-64f36864",
        "Hourly": "ami-fa6ff6fa"
      },
      "us-east-1": {
        "BYOL": "ami-9bdf9cfe",
        "Hourly": "ami-0950116c"
      },
      "sa-east-1": {
        "BYOL": "ami-d33cabce",
        "Hourly": "ami-0f70e712"
      },
      "us-west-1": {
        "BYOL": "ami-c925e38d",
        "Hourly": "ami-13cc0a57"
      },
      "us-west-2": {
        "BYOL": "ami-b847a28b",
        "Hourly": "ami-40bb5e73"
      }
    }
  },
  "Conditions": {
    "UseRegionMap": {
      "Fn::Equals": [
        {
          "Ref": "awsAMI"
        },
        "autodetect"
      ]
    },
    "CreateS3Bucket": {
      "Fn::Equals": [
        {
          "Ref": "optionalExistingS3Bucket"
        },
        ""
      ]
    },
    "AllocateElasticIP": {
      "Fn::Equals": [
        {
          "Ref": "optionalExistingElasticIP"
        },
        ""
      ]
    },
    "EnableLicensePool": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "optionalLicensePool"
            },
            ""
          ]
        }
      ]
    },
    "UseExistingSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "optionalExistingSecurityGroup"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "WorkerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "WorkerPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "autoscaling:Describe*",
                    "cloudformation:DescribeStacks",
                    "cloudformation:DescribeStackEvents",
                    "cloudformation:DescribeStackResource",
                    "cloudformation:DescribeStackResources",
                    "cloudformation:GetTemplate",
                    "cloudformation:List*",
                    "cloudwatch:Describe*",
                    "cloudwatch:Get*",
                    "cloudwatch:List*",
                    "ec2:Describe*",
                    "elasticloadbalancing:Describe*",
                    "SNS:*"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Resource": [
                    {
                      "Fn::If": [
                        "CreateS3Bucket",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "S3Bucket"
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "optionalExistingS3Bucket"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "Fn::If": [
                        "CreateS3Bucket",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "S3Bucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "optionalExistingS3Bucket"
                              },
                              "/*"
                            ]
                          ]
                        }
                      ]
                    }
                  ],
                  "Action": [
                    "s3:List*",
                    "s3:Get*"
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "WorkerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "WorkerRole"
          }
        ]
      }
    },
    "QueenRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "UTMPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "iam:PassRole",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:DeleteRolePolicy",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:RemoveRoleFromInstanceProfile",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:DeleteInstanceProfile",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:DeleteRole",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ec2:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "autoscaling:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudwatch:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "elb:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "elasticloadbalancing:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:*",
                  "Resource": "*"
                },
                {
                  "Resource": [
                    {
                      "Fn::If": [
                        "CreateS3Bucket",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "S3Bucket"
                              }
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "optionalExistingS3Bucket"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "Fn::If": [
                        "CreateS3Bucket",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "S3Bucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "optionalExistingS3Bucket"
                              },
                              "/*"
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "Fn::If": [
                        "EnableLicensePool",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "optionalLicensePool"
                              }
                            ]
                          ]
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    },
                    {
                      "Fn::If": [
                        "EnableLicensePool",
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              {
                                "Ref": "optionalLicensePool"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    }
                  ],
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "QueenInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "QueenRole"
          }
        ]
      }
    },
    "QueenSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "CidrBlock": {
          "Fn::Select": [
            "0",
            {
              "Ref": "awsSubnetIPBlocks"
            }
          ]
        },
        "AvailabilityZone": {
          "Ref": "awsAvailabilityZone1"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      },
      "DependsOn": "QueenRole"
    },
    "QueenSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "CidrBlock": {
          "Fn::Select": [
            "1",
            {
              "Ref": "awsSubnetIPBlocks"
            }
          ]
        },
        "AvailabilityZone": {
          "Ref": "awsAvailabilityZone2"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      },
      "DependsOn": "QueenRole"
    },
    "SwarmSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "CidrBlock": {
          "Fn::Select": [
            "2",
            {
              "Ref": "awsSubnetIPBlocks"
            }
          ]
        },
        "AvailabilityZone": {
          "Ref": "awsAvailabilityZone1"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      },
      "DependsOn": "QueenRole"
    },
    "SwarmSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "CidrBlock": {
          "Fn::Select": [
            "3",
            {
              "Ref": "awsSubnetIPBlocks"
            }
          ]
        },
        "AvailabilityZone": {
          "Ref": "awsAvailabilityZone2"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      },
      "DependsOn": "QueenRole"
    },
    "QueenRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "QueenRole",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "awsGatewayID"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "QueenRole",
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "QueenNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "DependsOn": "QueenRole",
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "InboundTCPQueenNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "QueenNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundUDPQueenNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "QueenNetworkAcl"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPQueenNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "QueenNetworkAcl"
        },
        "RuleNumber": "150",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundUDPQueenNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "QueenNetworkAcl"
        },
        "RuleNumber": "250",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "QueenSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "QueenSubnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "QueenSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "QueenSubnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "QueenSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "QueenSubnet1"
        },
        "NetworkAclId": {
          "Ref": "QueenNetworkAcl"
        }
      }
    },
    "QueenSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "QueenSubnet2"
        },
        "NetworkAclId": {
          "Ref": "QueenNetworkAcl"
        }
      }
    },
    "SwarmRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "QueenRole",
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "SwarmRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "QueenRole",
      "Properties": {
        "RouteTableId": {
          "Ref": "SwarmRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "awsGatewayID"
        }
      }
    },
    "SwarmNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "DependsOn": "QueenRole",
      "Metadata": {
        "waf": [
          "incoming-acl",
          "outgoing-acl"
        ]
      },
      "Properties": {
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "InboundHTTPSwarmNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundHTTPSSwarmNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        },
        "RuleNumber": "200",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "InboundSSHSwarmNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        },
        "RuleNumber": "400",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "awsTrustedNetwork"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundDynamicPorts1SwarmNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        },
        "RuleNumber": "500",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundDynamicPortSwarmNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutboundHTTPSSwarmNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        },
        "RuleNumber": "200",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "OutboundHTTPSwarmNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "DependsOn": "QueenRole",
      "Properties": {
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        },
        "RuleNumber": "300",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "SwarmSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "SwarmSubnet1"
        },
        "RouteTableId": {
          "Ref": "SwarmRouteTable"
        }
      }
    },
    "SwarmSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "SwarmSubnet2"
        },
        "RouteTableId": {
          "Ref": "SwarmRouteTable"
        }
      }
    },
    "SwarmSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "SwarmSubnet1"
        },
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        }
      }
    },
    "SwarmSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn": "QueenRole",
      "Properties": {
        "SubnetId": {
          "Ref": "SwarmSubnet2"
        },
        "NetworkAclId": {
          "Ref": "SwarmNetworkAcl"
        }
      }
    },
    "IPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "QueenRole",
      "Condition": "AllocateElasticIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateS3Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Prefix": "confd_backup",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            },
            {
              "Prefix": "postgres_basebackup",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            },
            {
              "Prefix": "postgres_wal",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "ConfdSNSTopic": {
      "Type": "AWS::SNS::Topic"
    },
    "SwarmSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "waf": [
          "elb-destination-security-group",
          "backend-security-group"
        ]
      },
      "Properties": {
        "GroupDescription": "Identifying security group",
        "VpcId": {
          "Ref": "awsVPCID"
        }
      }
    },
    "LoadBalancerReceiverSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "waf": [
          "frontend-security-group"
        ]
      },
      "Properties": {
        "GroupDescription": "Group for the receivers of the ElasticLoadBalancer",
        "VpcId": {
          "Ref": "awsVPCID"
        }
      }
    },
    "QueenSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Identifying security group",
        "VpcId": {
          "Ref": "awsVPCID"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "TrustedNetworkGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable TCP access from trusted network",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "awsTrustedNetwork"
            }
          }
        ],
        "VpcId": {
          "Ref": "awsVPCID"
        }
      }
    },
    "UntrustedGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Untrusted network restricted from accessing port 22 and 8080.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "21",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "23",
            "ToPort": "4443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "4445",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "awsVPCID"
        }
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "waf": [
          "elb-security-group"
        ]
      },
      "Properties": {
        "GroupDescription": "Enable HTTP access on port 8080",
        "VpcId": {
          "Ref": "awsVPCID"
        }
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata": {
        "waf": [
          "elb"
        ]
      },
      "DependsOn": "QueenRole",
      "Properties": {
        "CrossZone": "true",
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "SwarmSubnet1"
          },
          {
            "Ref": "SwarmSubnet2"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:80",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "5",
          "Timeout": "2"
        }
      }
    },
    "SwarmScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "ConfdSNSTopic",
        "QueenScalingGroup"
      ],
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "2",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "true",
          "PauseTime": "PT15M"
        }
      },
      "Properties": {
        "DesiredCapacity": "2",
        "MaxSize": "100",
        "MinSize": "2",
        "TerminationPolicies": [
          "Default"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "SwarmSubnet1"
          },
          {
            "Ref": "SwarmSubnet2"
          }
        ],
        "AvailabilityZones": [
          {
            "Ref": "awsAvailabilityZone1"
          },
          {
            "Ref": "awsAvailabilityZone2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "SwarmLaunchConfiguration"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Worker UTM",
            "PropagateAtLaunch": "true"
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ]
      }
    },
    "SwarmScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "SwarmScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "SwarmScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "SwarmScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "SwarmCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 60% for 2 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "SwarmScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "SwarmScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "SwarmCPUAlarmVeryHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 85% for 1 minute",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "85",
        "AlarmActions": [
          {
            "Ref": "SwarmScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "SwarmScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "SwarmCPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 40% for 3 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "3",
        "Threshold": "40",
        "AlarmActions": [
          {
            "Ref": "SwarmScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "SwarmScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "SwarmLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "WorkerInstanceProfile"
        },
        "ImageId": {
          "Fn::If": [
            "UseRegionMap",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "awsLicenseType"
                }
              ]
            },
            {
              "Ref": "awsAMI"
            }
          ]
        },
        "InstanceType": "m3.medium",
        "KeyName": {
          "Ref": "awsKeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "100"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "SwarmSecurityGroup"
          },
          {
            "Ref": "TrustedNetworkGroup"
          },
          {
            "Ref": "LoadBalancerReceiverSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "date +'UserData start %c' > /tmp/user_data.log\n",
                "sed -i 's/^/#/' /etc/crontab.reporting\n",
                "/usr/local/bin/confd-client.plx trigger crontab\n",
                "touch /etc/no-selfmonitor/queen_config_management\n",
                "touch /etc/no-selfmonitor/aws_resource_management\n",
                "mkdir -p /var/chroot-httpd/etc/sns\n",
                "export shared_secret=$(< /dev/urandom  tr -dc _A-Z-a-z-0-9 | head -c${1:-32})\n",
                "/opt/aws/apitools/cfn-init/bin/cfn-init -c swarm_node -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r SwarmLaunchConfiguration --region ",
                {
                  "Ref": "AWS::Region"
                },
                " >> /tmp/user_data.log 2>&1 || echo 'Failed to run cfn-init' >> /tmp/user_data.log\n",
                "/etc/init.d/httpd restart\n",
                "/etc/init.d/worker_config_management start\n",
                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e 0 --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource SwarmScalingGroup ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "exit 0\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "swarm_node": [
              "swarm_config",
              "swarm_commands"
            ]
          },
          "swarm_config": {
            "files": {
              "/etc/cloud/user_data.yml": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "version: 0.1.0\n",
                      "instance_role: worker\n",
                      "deployment_type: autoscaling\n",
                      "license_pool: ",
                      {
                        "Ref": "optionalLicensePool"
                      },
                      "\n",
                      "s3_bucket: ",
                      {
                        "Fn::If": [
                          "CreateS3Bucket",
                          {
                            "Ref": "S3Bucket"
                          },
                          {
                            "Ref": "optionalExistingS3Bucket"
                          }
                        ]
                      },
                      "\n",
                      "sns_topic: ",
                      {
                        "Ref": "ConfdSNSTopic"
                      },
                      "\n",
                      "config_prefix: config_management/\n",
                      "confd_filter: /etc/cloud/confd_filter.ph\n",
                      "region: ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "/var/chroot-httpd/etc/sns/sns.conf": {
                "mode": "0744",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "sns_topic: ",
                      {
                        "Ref": "ConfdSNSTopic"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "swarm_commands": {
            "commands": {
              "userdata_secret": {
                "command": "echo \"sns_secret: $shared_secret\" >> /etc/cloud/user_data.yml"
              },
              "mod_rewrite_secret": {
                "command": "sed -rie \"s/@SHARED_SECRET@/$shared_secret/\" /var/chroot-httpd/etc/httpd/vhost/httpd-sns.conf"
              }
            }
          }
        }
      }
    },
    "QueenScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "ConfdSNSTopic"
      ],
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "true",
          "PauseTime": "PT15M"
        }
      },
      "Properties": {
        "DesiredCapacity": "1",
        "MaxSize": "2",
        "MinSize": "1",
        "TerminationPolicies": [
          "NewestInstance"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "QueenSubnet1"
          },
          {
            "Ref": "QueenSubnet2"
          }
        ],
        "AvailabilityZones": [
          {
            "Ref": "awsAvailabilityZone1"
          },
          {
            "Ref": "awsAvailabilityZone2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "QueenLaunchConfiguration"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Queen UTM",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "QueenLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "QueenInstanceProfile"
        },
        "ImageId": {
          "Fn::If": [
            "UseRegionMap",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "awsLicenseType"
                }
              ]
            },
            {
              "Ref": "awsAMI"
            }
          ]
        },
        "InstanceType": "m3.medium",
        "KeyName": {
          "Ref": "awsKeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "100"
            }
          }
        ],
        "SecurityGroups": {
          "Fn::If": [
            "UseExistingSG",
            [
              {
                "Ref": "optionalExistingSecurityGroup"
              },
              {
                "Fn::GetAtt": [
                  "QueenSecurityGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "TrustedNetworkGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "UntrustedGroup",
                  "GroupId"
                ]
              }
            ],
            [
              {
                "Fn::GetAtt": [
                  "QueenSecurityGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "TrustedNetworkGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "UntrustedGroup",
                  "GroupId"
                ]
              }
            ]
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "date +'UserData start %c' > /tmp/user_data.log\n",
                "touch /etc/no-selfmonitor/worker_config_management\n",
                "touch /etc/no-selfmonitor/queen_config_management\n",
                "cc=`/usr/local/bin/confd-client.plx country_name_to_code \"",
                {
                  "Ref": "basicCountry"
                },
                "\"`\n",
                "echo \"{ hostname => '",
                {
                  "Ref": "basicHostname"
                },
                "', organization => '",
                {
                  "Ref": "basicOrganization"
                },
                "', city => '",
                {
                  "Ref": "basicCity"
                },
                "', country => '$cc', email => '",
                {
                  "Ref": "basicAdminEmail"
                },
                "', password => '",
                {
                  "Ref": "basicAdminPassword"
                },
                "' }\" > /var/confd/var/storage/setup.ph\n",
                "/etc/init.d/confd restart\n",
                "sleep 5\n",
                "/opt/aws/apitools/cfn-init/bin/cfn-init -c queen_node -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r QueenLaunchConfiguration --region ",
                {
                  "Ref": "AWS::Region"
                },
                " >> /tmp/user_data.log 2>&1 || echo 'Failed to run cfn-init' >> /tmp/user_data.log\n",
                "/usr/local/bin/confd-client.plx -noquote -stdin set \\'ha\\' \\'aws\\' < /tmp/user_data.config >> /tmp/user_data.log\n",
                "date +'UserData awslogs agent setup start %c' >> /tmp/user_data.log\n",
                "/usr/local/bin/awslogs-agent-setup.py -n -r ",
                {
                  "Ref": "AWS::Region"
                },
                "  -c /etc/cloud/awslogs.conf >> /tmp/user_data.log\n",
                "date +'UserData awslogs agent setup end %c' >> /tmp/user_data.log\n",
                "date +'UserData aws deamons start %c' >> /tmp/user_data.log\n",
                "/etc/init.d/ha_aws start\n",
                "/etc/init.d/aws_resource_management start\n",
                "date +'UserData aws deamons end %c' >> /tmp/user_data.log\n",
                "/usr/local/bin/aws_set_sd_check disable\n",
                "/usr/local/bin/confd-client.plx trigger ha_aws\n",
                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e 0 --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource QueenScalingGroup ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "exit 0\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "queen_node": [
              "queen_config"
            ]
          },
          "queen_config": {
            "files": {
              "/etc/cloud/user_data.yml": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "version: 0.1.0\n",
                      "instance_role: queen\n",
                      "deployment_type: autoscaling\n",
                      "license_pool: ",
                      {
                        "Ref": "optionalLicensePool"
                      },
                      "\n",
                      "s3_bucket: ",
                      {
                        "Fn::If": [
                          "CreateS3Bucket",
                          {
                            "Ref": "S3Bucket"
                          },
                          {
                            "Ref": "optionalExistingS3Bucket"
                          }
                        ]
                      },
                      "\n",
                      "sns_topic: ",
                      {
                        "Ref": "ConfdSNSTopic"
                      },
                      "\n",
                      "config_prefix: config_management/\n",
                      "elastic_ip: ",
                      {
                        "Fn::If": [
                          "AllocateElasticIP",
                          {
                            "Ref": "IPAddress"
                          },
                          {
                            "Ref": "optionalExistingElasticIP"
                          }
                        ]
                      },
                      "\n",
                      "stack_name: ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n",
                      "region: ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "/tmp/user_data.config": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\n",
                      "\"cloudwatch\" => { \"status\" => 1 },\n",
                      "\"confd\" => { \"backup\" => 1, \"backup_interval\" => 300, \"restore\" => 1, \"restore_done\" => 0 },\n",
                      "\"instance_role\" => \"ha_standalone\",\n",
                      "\"postgres\" => { \"archive_timeout\" => 300, \"backup\" => 1, \"base_backup_interval\" => 3600, \"restore\" => 1 },\n",
                      "\"syslog\" => { \"backup\" => 1, \"restore\" => 1, \"restore_period\" => 8 },\n",
                      "\"s3_bucket\" => \"",
                      {
                        "Fn::If": [
                          "CreateS3Bucket",
                          {
                            "Ref": "S3Bucket"
                          },
                          {
                            "Ref": "optionalExistingS3Bucket"
                          }
                        ]
                      },
                      "\",\n",
                      "\"stack_name\" => \"",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\",\n",
                      "\"elastic_ip\" => \"",
                      {
                        "Fn::If": [
                          "AllocateElasticIP",
                          {
                            "Ref": "IPAddress"
                          },
                          {
                            "Ref": "optionalExistingElasticIP"
                          }
                        ]
                      },
                      "\",\n",
                      "\"trusted_network\" => \"",
                      {
                        "Ref": "awsTrustedNetwork"
                      },
                      "\"\n",
                      "}\n"
                    ]
                  ]
                }
              },
              "/etc/cloud/resource-catalog.yml": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "elb: ",
                      {
                        "Ref": "ElasticLoadBalancer"
                      },
                      "\n",
                      "incoming_acl: ",
                      {
                        "Ref": "SwarmNetworkAcl"
                      },
                      "\n",
                      "outgoing_acl: ",
                      {
                        "Ref": "SwarmNetworkAcl"
                      },
                      "\n",
                      "elb_security_group: ",
                      {
                        "Ref": "LoadBalancerSecurityGroup"
                      },
                      "\n",
                      "elb_destination_security_group: ",
                      {
                        "Ref": "SwarmSecurityGroup"
                      },
                      "\n",
                      "frontend_security_group: ",
                      {
                        "Ref": "LoadBalancerReceiverSecurityGroup"
                      },
                      "\n",
                      "backend_security_group: ",
                      {
                        "Ref": "SwarmSecurityGroup"
                      },
                      "\n",
                      "\n",
                      "infrastructure:\n",
                      "  security_groups:\n",
                      "    - ",
                      {
                        "Ref": "TrustedNetworkGroup"
                      },
                      "\n",
                      "    - ",
                      {
                        "Ref": "UntrustedGroup"
                      },
                      "\n",
                      "    - ",
                      {
                        "Ref": "QueenSecurityGroup"
                      },
                      "\n",
                      "    - ",
                      {
                        "Ref": "SwarmSecurityGroup"
                      },
                      "\n",
                      "  acls:\n",
                      "    - ",
                      {
                        "Ref": "QueenNetworkAcl"
                      },
                      "\n",
                      "    - ",
                      {
                        "Ref": "SwarmNetworkAcl"
                      },
                      "\n",
                      "  elbs:\n"
                    ]
                  ]
                }
              },
              "/etc/cloud/inf-resources.yml": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "security_groups:\n",
                      "  ",
                      {
                        "Ref": "QueenSecurityGroup"
                      },
                      ":\n",
                      "    incoming:\n",
                      "      - from_port: 514\n",
                      "        to_port: 514\n",
                      "        protocol: UDP\n",
                      "        source: ",
                      {
                        "Ref": "SwarmSecurityGroup"
                      },
                      "\n",
                      "    outgoing:\n",
                      "      - from_port: 0\n",
                      "        to_port: 65535\n",
                      "        protocol: TCP\n",
                      "        source: 0.0.0.0/0\n",
                      "      - from_port: 0\n",
                      "        to_port: 65535\n",
                      "        protocol: UDP\n",
                      "        source: 0.0.0.0/0\n",
                      "  ",
                      {
                        "Ref": "TrustedNetworkGroup"
                      },
                      ":\n",
                      "    incoming:\n",
                      "      - from_port: 0\n",
                      "        to_port: 65535\n",
                      "        protocol: TCP\n",
                      "        source: ",
                      {
                        "Ref": "awsTrustedNetwork"
                      },
                      "\n",
                      "  ",
                      {
                        "Ref": "UntrustedGroup"
                      },
                      ":\n",
                      "    incoming:\n",
                      "      - from_port: 12\n",
                      "        to_port: 21\n",
                      "        protocol: TCP\n",
                      "        source: 0.0.0.0/0\n",
                      "      - from_port: 23\n",
                      "        to_port: 8079\n",
                      "        protocol: TCP\n",
                      "        source: 0.0.0.0/0\n",
                      "      - from_port: 8081\n",
                      "        to_port: 65535\n",
                      "        protocol: TCP\n",
                      "        source: 0.0.0.0/0\n",
                      "      - from_port: 3410\n",
                      "        to_port: 3410\n",
                      "        protocol: UDP\n",
                      "        source: 0.0.0.0/0\n",
                      "  ",
                      {
                        "Ref": "SwarmSecurityGroup"
                      },
                      ":\n",
                      "    incoming:\n",
                      "      - from_port: 6500\n",
                      "        to_port: 6500\n",
                      "        protocol: TCP\n",
                      "        source: 0.0.0.0/0\n",
                      "    outgoing:\n",
                      "      - from_port: 443\n",
                      "        to_port: 443\n",
                      "        protocol: TCP\n",
                      "        source: 0.0.0.0/0\n",
                      "      - from_port: 514\n",
                      "        to_port: 514\n",
                      "        protocol: UDP\n",
                      "        source: ",
                      {
                        "Ref": "QueenSecurityGroup"
                      },
                      "\n",
                      "acls:\n",
                      "  ",
                      {
                        "Ref": "QueenNetworkAcl"
                      },
                      ":\n",
                      "    incoming:\n",
                      "      - from_port: 0\n",
                      "        to_port: 65535\n",
                      "        protocol: 6\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "      - from_port: 0\n",
                      "        to_port: 65535\n",
                      "        protocol: 17\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "    outgoing:\n",
                      "      - from_port: 0\n",
                      "        to_port: 65535\n",
                      "        protocol: 6\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "      - from_port: 0\n",
                      "        to_port: 65535\n",
                      "        protocol: 17\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "  ",
                      {
                        "Ref": "SwarmNetworkAcl"
                      },
                      ":\n",
                      "    incoming:\n",
                      "      - from_port: 22\n",
                      "        to_port: 22\n",
                      "        protocol: 6\n",
                      "        source: ",
                      {
                        "Ref": "awsTrustedNetwork"
                      },
                      "\n",
                      "        action: ALLOW\n",
                      "      - from_port: 1024\n",
                      "        to_port: 65535\n",
                      "        protocol: 6\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "    outgoing:\n",
                      "      - from_port: 514\n",
                      "        to_port: 514\n",
                      "        protocol: 17\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "      - from_port: 443\n",
                      "        to_port: 443\n",
                      "        protocol: 6\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "      - from_port: 1024\n",
                      "        to_port: 65535\n",
                      "        protocol: 6\n",
                      "        source: 0.0.0.0/0\n",
                      "        action: ALLOW\n",
                      "elbs:\n"
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "Outputs": {
    "PublicIPAddress": {
      "Value": {
        "Fn::If": [
          "AllocateElasticIP",
          {
            "Ref": "IPAddress"
          },
          {
            "Ref": "optionalExistingElasticIP"
          }
        ]
      },
      "Description": "Use this IP to connect and to forward traffic to the UTM."
    },
    "QueenScalingGroup": {
      "Value": {
        "Ref": "QueenScalingGroup"
      },
      "Description": "The HA Scaling group."
    },
    "S3Bucket": {
      "Value": {
        "Fn::If": [
          "CreateS3Bucket",
          {
            "Ref": "S3Bucket"
          },
          {
            "Ref": "optionalExistingS3Bucket"
          }
        ]
      },
      "Description": "The S3 Bucket."
    },
    "ConfigurationSNSTopic": {
      "Description": "The SNS topic for configuration changes.",
      "Value": {
        "Ref": "ConfdSNSTopic"
      }
    },
    "SwarmScalingGroup": {
      "Value": {
        "Ref": "SwarmScalingGroup"
      },
      "Description": "The Swarm scaling group."
    },
    "VPCID": {
      "Value": {
        "Ref": "awsVPCID"
      },
      "Description": "The VPC of the Swarm"
    },
    "Region": {
      "Value": {
        "Ref": "AWS::Region"
      },
      "Description": "Region of the stack"
    },
    "ELB": {
      "Value": {
        "Ref": "ElasticLoadBalancer"
      },
      "Description": "Swarm ELB"
    }
  }
}