{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "High Availability (HA) UTM CloudFormation template. Please make sure that the VPC has a Gateway attached.",
  "Parameters": {
    "AMI": {
      "Description": "With autodetect latest AMI is used based on the license type.",
      "Type": "String",
      "Default": "autodetect"
    },
    "LicenseType": {
      "Description": "Bring Your Own License (BYOL) or hourly billing licensing type. This parameter has no effect if the AMI parameter is set to an AMI ID.",
      "Type": "String",
      "AllowedValues": [
        "Hourly",
        "BYOL"
      ],
      "Default": "Hourly"
    },
    "InstanceSize": {
      "Description": "Default selects m4.large if available in your region, m3.large otherwise.",
      "Type": "String",
      "Default": "default"
    },
    "AvailabilityZone1": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Please provide an Availability Zone."
    },
    "AvailabilityZone2": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Please provide another (different) Availability Zone."
    },
    "VPCID": {
      "Description": "ID of an existing VPC to launch the deployment in.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "GatewayID": {
      "Description": "The Internet Gateway ID of the VPC.",
      "Type": "String"
    },
    "SubnetIPBlocks": {
      "Description": "Please provide a comma-separated list of two CIDR blocks within the VPC. The two subnets will be created automatically.",
      "Type": "CommaDelimitedList"
    },
    "TrustedNetwork": {
      "Description": "Only connections from this network are allowed to ports 22 and 4444. E.g. 92.198.130.0/24. To allow access from anywhere use 0.0.0.0/0",
      "Type": "String"
    },
    "ExistingSecurityGroup": {
      "Description": "A security group to assign to the new stack.",
      "Type": "String",
      "Default": ""
    },
    "ExistingElasticIP": {
      "Description": "Elastic IP to assign to the UTM instance. If left empty a new Elastic IP will be allocated automatically.",
      "Type": "String",
      "Default": ""
    },
    "ExistingS3Bucket": {
      "Description": "S3 Bucket to store and restore backups. If left empty a new Bucket will be created automatically.",
      "Type": "String",
      "Default": ""
    },
    "LicensePool": {
      "Description": "In case of a BYOL scenario the license is automatically selected from this S3 Bucket (works only if there is at least one running UTM instance already using this license). If left empty the license can be installed using webadmin.",
      "Type": "String",
      "Default": ""
    },
    "Hostname": {
      "Description": "The hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number (max. 64 characters).",
      "Type": "String",
      "MaxLength": "64",
      "AllowedPattern": "^[0-9A-Za-z]{1}([A-Za-z0-9.-]*)$",
      "ConstraintDescription": "Invalid hostname. The hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number (max. 64 characters)."
    },
    "Email": {
      "Default": "",
      "Type": "String"
    },
    "AdminPassword": {
      "Type": "String",
      "NoEcho": "True"
    },
    "Organization": {
      "Type": "String"
    },
    "City": {
      "Type": "String"
    },
    "Country": {
      "Type": "String",
      "AllowedValues": [
        "Andorra",
        "United Arab Emirates",
        "Afghanistan",
        "Antigua and Barbuda",
        "Anguilla",
        "Albania",
        "Armenia",
        "Netherlands Antilles",
        "Angola",
        "Antarctica",
        "Argentina",
        "American Samoa",
        "Austria",
        "Australia",
        "Aland Islands",
        "Aruba",
        "Azerbaidjan",
        "Bosnia and Herzegovina",
        "Barbados",
        "Bangladesh",
        "Belgium",
        "Burkina Faso",
        "Bulgaria",
        "Bahrain",
        "Burundi",
        "Benin",
        "Saint Barthelemey",
        "Bermuda",
        "Brunei Darussalam",
        "Bolivia",
        "Brazil",
        "Bahamas",
        "Bhutan",
        "Bouvet Island",
        "Botswana",
        "Belarus",
        "Belize",
        "Canada",
        "Cocos Islands",
        "Congo, Democratic Rebpulic of the",
        "Central African Republic",
        "Congo",
        "Switzerland",
        "Ivory Coast",
        "Cook Islands",
        "Chile",
        "Cameroon",
        "China",
        "Colombia",
        "Costa Rica",
        "Cuba",
        "Cape Verde",
        "Christmas Island",
        "Cyprus",
        "Czech Republic",
        "Germany",
        "Djibouti",
        "Denmark",
        "Dominica",
        "Dominican Republic",
        "Algeria",
        "Ecuador",
        "Estonia",
        "Egypt",
        "Western Sahara",
        "Eritrea",
        "Spain",
        "Ethiopia",
        "Finland",
        "Fiji",
        "Falkland Islands",
        "Micronesia",
        "Faroe Islands",
        "France",
        "Gabon",
        "Great Britain",
        "Grenada",
        "Georgia",
        "French Guyana",
        "Guernsey",
        "Ghana",
        "Gibraltar",
        "Greenland",
        "Gambia",
        "Guinea",
        "Guadeloupe",
        "Equatorial Guinea",
        "Greece",
        "S. Georgia & S. Sandwich Isls.",
        "Guatemala",
        "Guam (USA)",
        "Guinea Bissau",
        "Guyana",
        "Hong Kong",
        "Heard and McDonald Islands",
        "Honduras",
        "Croatia",
        "Haiti",
        "Hungary",
        "Indonesia",
        "Ireland",
        "Israel",
        "Isle of Man",
        "India",
        "British Indian Ocean Territory",
        "Iraq",
        "Iran",
        "Iceland",
        "Italy",
        "Jersey",
        "Jamaica",
        "Jordan",
        "Japan",
        "Kenya",
        "Kyrgyz Republic (Kyrgyzstan)",
        "Cambodia, Kingdom of",
        "Kiribati",
        "Comoros",
        "Saint Kitts & Nevis Anguilla",
        "North Korea",
        "South Korea",
        "Kuwait",
        "Cayman Islands",
        "Kazakhstan",
        "Laos",
        "Lebanon",
        "Saint Lucia",
        "Liechtenstein",
        "Sri Lanka",
        "Liberia",
        "Lesotho",
        "Lithuania",
        "Luxembourg",
        "Latvia",
        "Libya",
        "Morocco",
        "Monaco",
        "Moldavia",
        "Montenegro",
        "Saint Martin (French)",
        "Madagascar",
        "Marshall Islands",
        "Macedonia",
        "Mali",
        "Myanmar",
        "Mongolia",
        "Macau",
        "Northern Mariana Islands",
        "Martinique (French)",
        "Mauritania",
        "Montserrat",
        "Malta",
        "Mauritius",
        "Maldives",
        "Malawi",
        "Mexico",
        "Malaysia",
        "Mozambique",
        "Namibia",
        "New Caledonia (French)",
        "Niger",
        "Norfolk Island",
        "Nigeria",
        "Nicaragua",
        "Netherlands",
        "Norway",
        "Nepal",
        "Nauru",
        "Niue",
        "New Zealand",
        "Oman",
        "Panama",
        "Peru",
        "Polynesia (French)",
        "Papua New Guinea",
        "Philippines",
        "Pakistan",
        "Poland",
        "Saint Pierre and Miquelon",
        "Pitcairn Island",
        "Puerto Rico",
        "Palestinian Territory (Occupied)",
        "Portugal",
        "Palau",
        "Paraguay",
        "Qatar",
        "Reunion (French)",
        "Romania",
        "Serbia",
        "Russian Federation",
        "Rwanda",
        "Saudi Arabia",
        "Solomon Islands",
        "Seychelles",
        "Sudan",
        "Sweden",
        "Singapore",
        "Saint Helena",
        "Slovenia",
        "Svalbard Jan Mayen Islands",
        "Slovak Republic",
        "Sierra Leone",
        "San Marino",
        "Senegal",
        "Somalia",
        "Suriname",
        "Saint Tome and Principe",
        "El Salvador",
        "Syria",
        "Swaziland",
        "Turks and Caicos Islands",
        "Chad",
        "French Southern Territories",
        "Togo",
        "Thailand",
        "Tadjikistan",
        "Tokelau",
        "Timor-Leste",
        "Turkmenistan",
        "Tunisia",
        "Tonga",
        "Turkey",
        "Trinidad and Tobago",
        "Tuvalu",
        "Taiwan",
        "Tanzania",
        "Ukraine",
        "Uganda",
        "United Kingdom",
        "USA Minor Outlying Islands",
        "United States",
        "Uruguay",
        "Uzbekistan",
        "Holy See (Vatican City State)",
        "Saint Vincent & Grenadines",
        "Venezuela",
        "Virgin Islands (British)",
        "Virgin Islands (USA)",
        "Vietnam",
        "Vanuatu",
        "Wallis and Futuna Islands",
        "Samoa",
        "Yemen",
        "Mayotte",
        "South Africa",
        "Zambia",
        "Zimbabwe"
      ]
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Instance Configuration"
          },
          "Parameters": [
            "AMI",
            "LicenseType",
            "InstanceSize"
          ]
        },
        {
          "Label": {
            "default": "UTM Infrastructure Configuration"
          },
          "Parameters": [
            "AvailabilityZone1",
            "AvailabilityZone2",
            "VPCID",
            "GatewayID",
            "SubnetIPBlocks",
            "TrustedNetwork",
            "ExistingSecurityGroup",
            "ExistingElasticIP",
            "ExistingS3Bucket",
            "LicensePool"
          ]
        },
        {
          "Label": {
            "default": "Settings for Initial UTM Setup"
          },
          "Parameters": [
            "Hostname",
            "Email",
            "AdminPassword",
            "Organization",
            "City",
            "Country",
            "KeyName"
          ]
        }
      ],
      "ParameterLabels": {
        "AMI": {
          "default": "UTM AMI"
        },
        "LicenseType": {
          "default": "License Type"
        },
        "InstanceSize": {
          "default": "Instance Size"
        },
        "AvailabilityZone1": {
          "default": "Availability Zone 1"
        },
        "AvailabilityZone2": {
          "default": "Availability Zone 2"
        },
        "VPCID": {
          "default": "VPC ID"
        },
        "GatewayID": {
          "default": "Gateway ID"
        },
        "SubnetIPBlocks": {
          "default": "Two Subnet CIDR Blocks"
        },
        "TrustedNetwork": {
          "default": "Trusted Network CIDR"
        },
        "ExistingSecurityGroup": {
          "default": "Existing SecurityGroup (optional)"
        },
        "ExistingElasticIP": {
          "default": "Existing Elastic IP (optional)"
        },
        "ExistingS3Bucket": {
          "default": "S3 Bucket for UTM Synchronization and Backup (optional)"
        },
        "LicensePool": {
          "default": "S3 Bucket Containing Licenses (optional)"
        },
        "Hostname": {
          "default": "Hostname"
        },
        "Email": {
          "default": "Admin E-Mail Address"
        },
        "AdminPassword": {
          "default": "Admin Password"
        },
        "Organization": {
          "default": "Organization"
        },
        "City": {
          "default": "City"
        },
        "Country": {
          "default": "Country"
        },
        "KeyName": {
          "default": "SSH Key"
        }
      }
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-northeast-1": {
        "Hourly": "ami-71e09416",
        "BYOL": "ami-2ce5914b",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "ap-northeast-2": {
        "Hourly": "ami-2afa2c44",
        "BYOL": "ami-2bfa2c45",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "ap-south-1": {
        "Hourly": "ami-731d6b1c",
        "BYOL": "ami-c61d6ba9",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "ap-southeast-1": {
        "Hourly": "ami-6fad040c",
        "BYOL": "ami-f4ab0297",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "ap-southeast-2": {
        "Hourly": "ami-7d003a1e",
        "BYOL": "ami-7c003a1f",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "ca-central-1": {
        "Hourly": "ami-6816a40c",
        "BYOL": "ami-7a17a51e",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "eu-central-1": {
        "Hourly": "ami-ac38fbc3",
        "BYOL": "ami-ce3dfea1",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "eu-west-1": {
        "Hourly": "ami-0f1a377c",
        "BYOL": "ami-921439e1",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "eu-west-2": {
        "Hourly": "ami-70e7ed14",
        "BYOL": "ami-95f9f3f1",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "sa-east-1": {
        "Hourly": "ami-8eed76e2",
        "BYOL": "ami-2fee7543",
        "ARN": "aws",
        "HAInstanceType": "m3.large"
      },
      "us-east-1": {
        "Hourly": "ami-c61805d1",
        "BYOL": "ami-c91805de",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "us-east-2": {
        "Hourly": "ami-9cf4aef9",
        "BYOL": "ami-73f1ab16",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "us-gov-west-1": {
        "Hourly": "ami-28932849",
        "BYOL": "ami-28932849",
        "ARN": "aws-us-gov",
        "HAInstanceType": "c4.large"
      },
      "us-west-1": {
        "Hourly": "ami-78f9a818",
        "BYOL": "ami-9ff6a7ff",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      },
      "us-west-2": {
        "Hourly": "ami-09299f69",
        "BYOL": "ami-6817a108",
        "ARN": "aws",
        "HAInstanceType": "c4.large"
      }
    }
  },
  "Conditions": {
    "DetectAMI": {
      "Fn::Equals": [
        {
          "Ref": "AMI"
        },
        "autodetect"
      ]
    },
    "DetectInstanceSize": {
      "Fn::Equals": [
        {
          "Ref": "InstanceSize"
        },
        "default"
      ]
    },
    "CreateS3Bucket": {
      "Fn::Equals": [
        {
          "Ref": "ExistingS3Bucket"
        },
        ""
      ]
    },
    "AllocateElasticIP": {
      "Fn::Equals": [
        {
          "Ref": "ExistingElasticIP"
        },
        ""
      ]
    },
    "UseExistingSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExistingSecurityGroup"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "CidrBlock": {
          "Fn::Select": [
            "0",
            {
              "Ref": "SubnetIPBlocks"
            }
          ]
        },
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "HA_UTM"
          }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "CidrBlock": {
          "Fn::Select": [
            "1",
            {
              "Ref": "SubnetIPBlocks"
            }
          ]
        },
        "AvailabilityZone": {
          "Ref": "AvailabilityZone2"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": "HA_UTM"
          }
        ]
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "GatewayID"
        }
      }
    },
    "Subnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "IPAddress": {
      "Type": "AWS::EC2::EIP",
      "Condition": "AllocateElasticIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateS3Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Prefix": "confd_backup",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            },
            {
              "Prefix": "postgres_basebackup",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            },
            {
              "Prefix": "postgres_wal",
              "ExpirationInDays": "3",
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "UTMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "UTMPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "iam:PassRole",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "NotAction": "iam:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:UpdateStack",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::FindInMap": [
                              "RegionMap",
                              {
                                "Ref": "AWS::Region"
                              },
                              "ARN"
                            ]
                          },
                          ":logs:*:*:*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UTMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "UTMRole"
          }
        ]
      }
    },
    "UTMSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Identifying security group",
        "VpcId": {
          "Ref": "VPCID"
        }
      }
    },
    "TrustedNetworkGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable TCP access from trusted network",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "TrustedNetwork"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      }
    },
    "UntrustedGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Untrusted network restricted from accessing port 22 and 4444.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "21",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "23",
            "ToPort": "4443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "4445",
            "ToPort": "5431",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5433",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "3410",
            "ToPort": "3410",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      }
    },
    "UTMScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT5M"
        }
      },
      "Properties": {
        "DesiredCapacity": "2",
        "MaxSize": "2",
        "MinSize": "1",
        "TerminationPolicies": [
          "NewestInstance"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ],
        "AvailabilityZones": [
          {
            "Ref": "AvailabilityZone1"
          },
          {
            "Ref": "AvailabilityZone2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "UTMLaunchConfiguration"
        },
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "UnhealthyTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "HA-UTM",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "UTMLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "UTMInstanceProfile"
        },
        "ImageId": {
          "Fn::If": [
            "DetectAMI",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "LicenseType"
                }
              ]
            },
            {
              "Ref": "AMI"
            }
          ]
        },
        "InstanceType": {
          "Fn::If": [
            "DetectInstanceSize",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "HAInstanceType"
              ]
            },
            {
              "Ref": "InstanceSize"
            }
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "100"
            }
          }
        ],
        "SecurityGroups": {
          "Fn::If": [
            "UseExistingSG",
            [
              {
                "Ref": "ExistingSecurityGroup"
              },
              {
                "Fn::GetAtt": [
                  "UTMSecurityGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "TrustedNetworkGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "UntrustedGroup",
                  "GroupId"
                ]
              }
            ],
            [
              {
                "Fn::GetAtt": [
                  "UTMSecurityGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "TrustedNetworkGroup",
                  "GroupId"
                ]
              },
              {
                "Fn::GetAtt": [
                  "UntrustedGroup",
                  "GroupId"
                ]
              }
            ]
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "date +'UserData start %c' > /tmp/user_data.log\n",
                "echo 'version: \"0.1.0\"' >> /etc/cloud/user_data.yml\n",
                "echo 'instance_role: \"ha_standalone\"' >> /etc/cloud/user_data.yml\n",
                "echo 'deployment_type: \"ha_warm_standby\"' >> /etc/cloud/user_data.yml\n",
                "echo 'license_pool: \"",
                {
                  "Ref": "LicensePool"
                },
                "\"' >> /etc/cloud/user_data.yml\n",
                "echo 'region: \"",
                {
                  "Ref": "AWS::Region"
                },
                "\"' >> /etc/cloud/user_data.yml\n",
                "cc=`/usr/local/bin/confd-client.plx country_name_to_code \"",
                {
                  "Ref": "Country"
                },
                "\"`\n",
                "echo \"{ hostname => '",
                {
                  "Ref": "Hostname"
                },
                "', organization => '",
                {
                  "Ref": "Organization"
                },
                "', city => '",
                {
                  "Ref": "City"
                },
                "', country => '$cc', email => '",
                {
                  "Ref": "Email"
                },
                "', password => '",
                {
                  "Ref": "AdminPassword"
                },
                "' }\" > /var/confd/var/storage/setup.ph\n",
                "/etc/init.d/confd restart\n",
                "sleep 5\n",
                "echo 'elastic_ip: \"",
                {
                  "Fn::If": [
                    "AllocateElasticIP",
                    {
                      "Ref": "IPAddress"
                    },
                    {
                      "Ref": "ExistingElasticIP"
                    }
                  ]
                },
                "\"' >> /etc/cloud/user_data.yml\n",
                "echo 's3_bucket: \"",
                {
                  "Fn::If": [
                    "CreateS3Bucket",
                    {
                      "Ref": "S3Bucket"
                    },
                    {
                      "Ref": "ExistingS3Bucket"
                    }
                  ]
                },
                "\"' >> /etc/cloud/user_data.yml\n",
                "echo 'stack_name: \"",
                {
                  "Ref": "AWS::StackName"
                },
                "\"' >> /etc/cloud/user_data.yml\n",
                "date +'UserData confd config start %c' >> /tmp/user_data.log\n",
                "echo '{' > /tmp/user_data.config\n",
                "echo '\"cloudwatch\" => { \"status\" => 1 },' >> /tmp/user_data.config\n",
                "echo '\"confd\" => { \"backup\" => 1, \"backup_interval\" => 300, \"restore\" => 1, \"restore_done\" => 0 },' >> /tmp/user_data.config\n",
                "echo '\"instance_role\" => \"ha_standalone\",' >> /tmp/user_data.config\n",
                "echo '\"postgres\" => { \"archive_timeout\" => 300, \"backup\" => 1, \"base_backup_interval\" => 3600, \"restore\" => 1 },' >> /tmp/user_data.config\n",
                "echo '\"syslog\" => { \"backup\" => 1, \"restore\" => 1, \"restore_period\" => 8 },' >> /tmp/user_data.config\n",
                "echo '\"s3_bucket\" => \"",
                {
                  "Fn::If": [
                    "CreateS3Bucket",
                    {
                      "Ref": "S3Bucket"
                    },
                    {
                      "Ref": "ExistingS3Bucket"
                    }
                  ]
                },
                "\",' >> /tmp/user_data.config\n",
                "echo '\"stack_name\" => \"",
                {
                  "Ref": "AWS::StackName"
                },
                "\",' >> /tmp/user_data.config\n",
                "echo '\"elastic_ip\" => \"",
                {
                  "Fn::If": [
                    "AllocateElasticIP",
                    {
                      "Ref": "IPAddress"
                    },
                    {
                      "Ref": "ExistingElasticIP"
                    }
                  ]
                },
                "\",' >> /tmp/user_data.config\n",
                "echo '\"trusted_network\" => \"",
                {
                  "Ref": "TrustedNetwork"
                },
                "\"' >> /tmp/user_data.config\n",
                "echo '}' >> /tmp/user_data.config\n",
                "/usr/local/bin/confd-client.plx -noquote -stdin set \\'ha\\' \\'aws\\' < /tmp/user_data.config >> /tmp/user_data.log\n",
                "date +'UserData confd config end %c' >> /tmp/user_data.log\n",
                "date +'UserData ha aws start %c' >> /tmp/user_data.log\n",
                "/etc/init.d/ha_aws start\n",
                "date +'UserData awslogs agent setup start %c' >> /tmp/user_data.log\n",
                "/usr/local/bin/awslogs-agent-setup.py -n -r ",
                {
                  "Ref": "AWS::Region"
                },
                "  -c /etc/cloud/awslogs.conf >> /tmp/user_data.log\n",
                "date +'UserData awslogs agent setup end %c' >> /tmp/user_data.log\n",
                "/usr/local/bin/aws_set_sd_check disable >> /tmp/user_data.log\n",
                "/usr/local/bin/confd-client.plx trigger ha_aws\n",
                "exit 0\n"
              ]
            ]
          }
        }
      }
    },
    "IngressTrafficMinimal": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Terminate if the incoming traffic is suspiciously low",
        "MetricName": "NetworkIn",
        "Namespace": "AWS/EC2",
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "100",
        "AlarmActions": [
          {
            "Ref": "UnhealthyTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "UTMScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "EgressTrafficMinimal": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Terminate if the outgoing traffic is suspiciously low",
        "MetricName": "NetworkOut",
        "Namespace": "AWS/EC2",
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "100",
        "AlarmActions": [
          {
            "Ref": "UnhealthyTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "UTMScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "UnhealthyTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "Email"
            },
            "Protocol": "email"
          }
        ]
      }
    }
  },
  "Outputs": {
    "PublicIPAddress": {
      "Value": {
        "Fn::If": [
          "AllocateElasticIP",
          {
            "Ref": "IPAddress"
          },
          {
            "Ref": "ExistingElasticIP"
          }
        ]
      },
      "Description": "Use this IP to connect and to forward traffic to the UTM."
    },
    "ScalingGroup": {
      "Value": {
        "Ref": "UTMScalingGroup"
      },
      "Description": "The HA Scaling group."
    },
    "S3Bucket": {
      "Value": {
        "Fn::If": [
          "CreateS3Bucket",
          {
            "Ref": "S3Bucket"
          },
          {
            "Ref": "ExistingS3Bucket"
          }
        ]
      },
      "Description": "The S3 Bucket."
    },
    "VPCID": {
      "Value": {
        "Ref": "VPCID"
      },
      "Description": "The VPC of the deployment."
    }
  }
}
