#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'slop'
require 'json'
require 'template_helper/region_map'
require 'pp'

def read_map_file(filename)
  return {} if( filename == '/dev/stdout')
  doc = File.read(filename)
  JSON.parse(doc)
rescue
    return {}
end

def dump_map_file(data, filename)
  file = File.new(filename, File::CREAT|File::TRUNC|File::RDWR)
  file.write(JSON.pretty_generate(data))
  file.close
end

begin
  opts = Slop.parse do |o|
    o.string '--BYOL', 'product-code'
    o.string '--Hourly', 'product-code'
    o.string '--EGW'
    o.string '-o', '--out', 'output file', default: '/dev/stdout'
    o.on '-h', '--help' do
      puts o
      exit
    end
  end
  if !((opts[:BYOL] && opts[:Hourly] && opts[:out]) || (opts[:EGW] && opts[:out]))
    puts opts
    exit
  end

  region_map = {}
  if (opts[:BYOL] && opts[:Hourly] && opts[:out])
    region_map = TemplateHelper::RegionMap.new( 'BYOL'   => opts[:BYOL], 'Hourly' => opts[:Hourly])
    old_map = read_map_file(opts[:out])
    if (region_map.to_hash == old_map)
      puts "#{opts[:out]} has not changed. Not touching."
    else
      dump_map_file(region_map,opts[:out])
    end
  else
    region_map = TemplateHelper::RegionMap.new("XXX", "EGW")
    old_map = read_map_file(opts[:out])
    if (region_map.to_hash == old_map)
      puts "#{opts[:out]} has not changed. Not touching."
    else
      dump_map_file(region_map,opts[:out])
    end
  end
end
