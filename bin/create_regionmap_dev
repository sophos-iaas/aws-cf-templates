#!/usr/bin/env ruby

require 'slop'
require 'json'
require 'aws-sdk'

# Create maps from region to the newest ami and write it as json to stdout.
# example:
# {
#   "ap-southeast-2": {
#     "BYOL": "ami-fdd1f69e"
#    },
#   "eu-central-1": {
#     "BYOL": "ami-a0849fcc"
#   }
# }

def dump_map_file(data, filename)
  file = File.new(filename, File::CREAT|File::TRUNC|File::RDWR)
  file.write(JSON.pretty_generate(data))
  file.close
end

# Find the newest ami in images with name matching regex.
# If the regex contains captures groups (), sort by this, else with the entire name.
# Insert the ami-id in the region/ami map.
def insert_latest_ami_map(images, regex, map, region, key)

  selected_images = images.select do |image|
    image.name =~ regex
  end

  latest_ami = selected_images.sort_by do |aa|
    aa.name.scan(regex)
  end.last

  if (latest_ami)
    STDERR.puts "#{$0}:   --> #{latest_ami.name}"
    map[region] = {key => latest_ami.image_id}
  end
end

begin
  opts = Slop.parse do |o|
    o.string '--regex', 'regex for the amis, maybe with capture groups for limited sorting parts'
    o.string '--owner', 'only search for amis with this owner_id'
    o.string '--key', 'use BYOL for UTM ami or EGW for EGW ami'
    o.string '-o', '--out', 'output file', default: '/dev/stdout'
    o.on '-h', '--help' do
      puts o
      exit
    end
  end

  if (!opts[:regex] || !opts[:key])
    puts opts
    exit 1
  end

  STDERR.puts "#{$0}: Warning: owner is not set, it may take a long time" unless opts[:owner]

  region_ami_map = {}   # the reponse map

  ec2_client = Aws::EC2::Client.new(region: ENV["AWS_DEFAULT_REGION"])
  all_regions = ec2_client.describe_regions.regions.map(&:region_name)

  all_regions.each do | region_name |
    STDERR.puts "#{$0}: searching in region = #{region_name}"

    dev_images = Aws::EC2::Client.new(region: region_name).describe_images({
           owners: opts[:owner] ? [opts[:owner]] : nil,
           filters: [
             { name: 'state', values: ['available'] },
           ],
        }).images

    insert_latest_ami_map(dev_images, /#{opts[:regex]}/, region_ami_map, region_name, opts[:key])
  end

  dump_map_file(region_ami_map, opts[:out])
end
