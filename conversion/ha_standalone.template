{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "AllocateElasticIP": {
            "Fn::Equals": [
                {
                    "Ref": "ExistingElasticIP"
                },
                ""
            ]
        },
        "CreateS3Bucket": {
            "Fn::Equals": [
                {
                    "Ref": "ExistingS3Bucket"
                },
                ""
            ]
        }
    },
    "Description": "Highly Avalaible UTM within an existing VPC",
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "BYOL": "ami-d2369dd2",
                "Hourly": "ami-d6379cd6"
            },
            "ap-southeast-1": {
                "BYOL": "ami-a22427f0",
                "Hourly": "ami-b02427e2"
            },
            "ap-southeast-2": {
                "BYOL": "ami-dfcc8be5",
                "Hourly": "ami-ebcc8bd1"
            },
            "eu-central-1": {
                "BYOL": "ami-ecbe84f1",
                "Hourly": "ami-06bf851b"
            },
            "eu-west-1": {
                "BYOL": "ami-b68dddc1",
                "Hourly": "ami-e21d5395"
            },
            "sa-east-1": {
                "BYOL": "ami-f93cb0e4",
                "Hourly": "ami-ed3cb0f0"
            },
            "us-east-1": {
                "BYOL": "ami-6da27506",
                "Hourly": "ami-6fa27504"
            },
            "us-west-1": {
                "BYOL": "ami-6f40b32b",
                "Hourly": "ami-5140b315"
            },
            "us-west-2": {
                "BYOL": "ami-43777573",
                "Hourly": "ami-5f77756f"
            }
        }
    },
    "Outputs": {
        "PublicIPAddress": {
            "Description": "Use this IP to connect and to forward traffic to the UTM.",
            "Value": {
                "Ref": "IPAddress"
            }
        },
        "S3Bucket": {
            "Description": "The S3 Bucket.",
            "Value": {
                "Fn::If": [
                    "CreateS3Bucket",
                    {
                        "Ref": "S3Bucket"
                    },
                    {
                        "Ref": "ExistingS3Bucket"
                    }
                ]
            }
        },
        "ScalingGroup": {
            "Description": "The HA Scaling group.",
            "Value": {
                "Ref": "UTMScalingGroup"
            }
        },
        "VPCID": {
            "Description": "The VPC of the Deployment.",
            "Value": {
                "Ref": "VPCID"
            }
        }
    },
    "Parameters": {
        "AdminPassword": {
            "Description": "UTM admin password",
            "NoEcho": true,
            "Type": "String"
        },
        "AvailabilityZone1": {
            "Description": "Please provide an Availability Zone.",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "AvailabilityZone2": {
            "Description": "Please provide an Availability Zone.",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "City": {
            "Description": "City",
            "Type": "String"
        },
        "Country": {
            "AllowedValues": [
                "Andorra",
                "United Arab Emirates",
                "Afghanistan",
                "Antigua and Barbuda",
                "Anguilla",
                "Albania",
                "Armenia",
                "Netherlands Antilles",
                "Angola",
                "Antarctica",
                "Argentina",
                "American Samoa",
                "Austria",
                "Australia",
                "Aland Islands",
                "Aruba",
                "Azerbaidjan",
                "Bosnia and Herzegovina",
                "Barbados",
                "Bangladesh",
                "Belgium",
                "Burkina Faso",
                "Bulgaria",
                "Bahrain",
                "Burundi",
                "Benin",
                "Saint Barthelemey",
                "Bermuda",
                "Brunei Darussalam",
                "Bolivia",
                "Brazil",
                "Bahamas",
                "Bhutan",
                "Bouvet Island",
                "Botswana",
                "Belarus",
                "Belize",
                "Canada",
                "Cocos Islands",
                "Congo, Democratic Rebpulic of the",
                "Central African Republic",
                "Congo",
                "Switzerland",
                "Ivory Coast",
                "Cook Islands",
                "Chile",
                "Cameroon",
                "China",
                "Colombia",
                "Costa Rica",
                "Cuba",
                "Cape Verde",
                "Christmas Island",
                "Cyprus",
                "Czech Republic",
                "Germany",
                "Djibouti",
                "Denmark",
                "Dominica",
                "Dominican Republic",
                "Algeria",
                "Ecuador",
                "Estonia",
                "Egypt",
                "Western Sahara",
                "Eritrea",
                "Spain",
                "Ethiopia",
                "Finland",
                "Fiji",
                "Falkland Islands",
                "Micronesia",
                "Faroe Islands",
                "France",
                "Gabon",
                "Great Britain",
                "Grenada",
                "Georgia",
                "French Guyana",
                "Guernsey",
                "Ghana",
                "Gibraltar",
                "Greenland",
                " Gambia",
                "Guinea",
                "Guadeloupe",
                "Equatorial Guinea",
                "Greece",
                "S. Georgia & S. Sandwich Isls.",
                "Guatemala",
                "Guam (USA)",
                "Guinea Bissau",
                "Guyana",
                "Hong Kong",
                "Heard and McDonald Islands",
                "Honduras",
                "Croatia",
                "Haiti",
                "Hungary",
                "Indonesia",
                "Ireland",
                "Israel",
                "Isle of Man",
                "India",
                "British Indian Ocean Territory",
                "Iraq",
                "Iran",
                "Iceland",
                "Italy",
                "Jersey",
                "Jamaica",
                "Jordan",
                "Japan",
                "Kenya",
                "Kyrgyz Republic (Kyrgyzstan)",
                "Cambodia, Kingdom of",
                "Kiribati",
                "Comoros",
                "Saint Kitts & Nevis Anguilla",
                "North Korea",
                "South Korea",
                "Kuwait",
                "Cayman Islands",
                "Kazakhstan",
                "Laos",
                "Lebanon",
                "Saint Lucia",
                "Liechtenstein",
                "Sri Lanka",
                "Liberia",
                "Lesotho",
                "Lithuania",
                "Luxembourg",
                "Latvia",
                "Libya",
                "Morocco",
                "Monaco",
                "Moldavia",
                "Montenegro",
                "Saint Martin (French)",
                "Madagascar",
                "Marshall Islands",
                "Macedonia",
                "Mali",
                "Myanmar",
                "Mongolia",
                "Macau",
                "Northern Mariana Islands",
                "Martinique (French)",
                "Mauritania",
                "Montserrat",
                "Malta",
                "Mauritius",
                "Maldives",
                "Malawi",
                "Mexico",
                "Malaysia",
                "Mozambique",
                "Namibia",
                "New Caledonia (French)",
                "Niger",
                "Norfolk Island",
                "Nigeria",
                "Nicaragua",
                "Netherlands",
                "Norway",
                "Nepal",
                "Nauru",
                "Niue",
                "New Zealand",
                "Oman",
                "Panama",
                "Peru",
                "Polynesia (French)",
                "Papua New Guinea",
                "Philippines",
                "Pakistan",
                "Poland",
                "Saint Pierre and Miquelon",
                "Pitcairn Island",
                "Puerto Rico",
                "Palestinian Territory (Occupied)",
                "Portugal",
                "Palau",
                "Paraguay",
                "Qatar",
                "Reunion (French)",
                "Romania",
                "Serbia",
                "Russian Federation",
                "Rwanda",
                "Saudi Arabia",
                "Solomon Islands",
                "Seychelles",
                "Sudan",
                "Sweden",
                "Singapore",
                "Saint Helena",
                "Slovenia",
                "Svalbard Jan Mayen Islands",
                "Slovak Republic",
                "Sierra Leone",
                "San Marino",
                "Senegal",
                "Somalia",
                "Suriname",
                "Saint Tome and Principe",
                "El Salvador",
                "Syria",
                "Swaziland",
                "Turks and Caicos Islands",
                "Chad",
                "French Southern Territories",
                "Togo",
                "Thailand",
                "Tadjikistan",
                "Tokelau",
                "Timor-Leste",
                "Turkmenistan",
                "Tunisia",
                "Tonga",
                "Turkey",
                "Trinidad and Tobago",
                "Tuvalu",
                "Taiwan",
                "Tanzania",
                "Ukraine",
                "Uganda",
                "United Kingdom",
                "USA Minor Outlying Islands",
                "United States",
                "Uruguay",
                "Uzbekistan",
                "Holy See (Vatican City State)",
                "Saint Vincent & Grenadines",
                "Venezuela",
                "Virgin Islands (British)",
                "Virgin Islands (USA)",
                "Vietnam",
                "Vanuatu",
                "Wallis and Futuna Islands",
                "Samoa",
                "Yemen",
                "Mayotte",
                "South Africa",
                "Zambia",
                "Zimbabwe"
            ],
            "Description": "Country",
            "Type": "String"
        },
        "Email": {
            "Description": "UTM admin email",
            "Type": "String"
        },
        "ExistingElasticIP": {
            "Default": "",
            "Description": "Optional. The Elastic IP to assign in the UTM instance. If left empty a new Elastic IP will be allocated automatically.",
            "Type": "String"
        },
        "ExistingS3Bucket": {
            "Default": "",
            "Description": "Optional. The S3 Bucket to store and restore backups. If left empty a new bucket will be created automatically.",
            "Type": "String"
        },
        "GatewayID": {
            "Description": "The Gateway of the VPC.",
            "Type": "String"
        },
        "Hostname": {
            "AllowedPattern": "^[0-9A-Za-z]{1}([A-Za-z0-9.-]*)$",
            "ConstraintDescription": "Invalid hostname. The hostname field can have a maximum of 64 characters. Hostname can only contain lower- and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number.",
            "Description": "The hostname field can have a maximum of 64 characters. Hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number.",
            "MaxLength": "64",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LicensePool": {
            "Default": "",
            "Description": "Optional. S3 bucket where the licenses are stored",
            "Type": "String"
        },
        "LicenseType": {
            "AllowedValues": [
                "Hourly",
                "BYOL"
            ],
            "Description": "Bring or own license or hourly billing.",
            "Type": "String"
        },
        "Organization": {
            "Description": "Name of your Organization",
            "Type": "String"
        },
        "SubnetIPBlocks": {
            "Description": "Two subnet CIDR blocks with the VPC.",
            "Type": "CommaDelimitedList"
        },
        "TrustedNetwork": {
            "Default": "0.0.0.0/0",
            "Description": "Trusted network. Only connections from this network are allowed to ports 22 and 8080. E.g 92.198.130.0/24",
            "Type": "String"
        },
        "VPCID": {
            "Description": "VPC to launch the deployment in.",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "EgressTrafficMinimal": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "UnhealthyTopic"
                    }
                ],
                "AlarmDescription": "Terminate if the incoming traffic is suspiciously low",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "UTMScalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "2",
                "MetricName": "NetworkOut",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Sum",
                "Threshold": "100"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "IPAddress": {
            "Condition": "AllocateElasticIP",
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "InboundDynamicPortsPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "200"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundRedUDPPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "3410",
                    "To": "3410"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "400"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundSSHPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "300"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "IngressTrafficMinimal": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "UnhealthyTopic"
                    }
                ],
                "AlarmDescription": "Terminate if the incoming traffic is suspiciously low",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "UTMScalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "2",
                "MetricName": "NetworkIn",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Sum",
                "Threshold": "100"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "OutBoundDynamicPortPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "305"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundHTTPPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "205"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundHTTPSPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "405"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundRedPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "3000",
                    "To": "3000"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "406"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundRedUDPPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "3410",
                    "To": "3410"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "407"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundSSHPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "105"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "Route": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "GatewayID"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "RouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "S3Bucket": {
            "Condition": "CreateS3Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "ExpirationInDays": "3",
                            "Prefix": "confd_backup",
                            "Status": "Enabled"
                        },
                        {
                            "ExpirationInDays": "3",
                            "Prefix": "postgres_basebackup",
                            "Status": "Enabled"
                        },
                        {
                            "ExpirationInDays": "3",
                            "Prefix": "postgres_wal",
                            "Status": "Enabled"
                        }
                    ]
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "Subnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone1"
                },
                "CidrBlock": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "SubnetIPBlocks"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet1NetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "Subnet1"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "Subnet1RouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Subnet2": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone2"
                },
                "CidrBlock": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "SubnetIPBlocks"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet2NetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "Subnet2"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "Subnet2RouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet2"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "TrustedSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable TCP access from trusted network",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "TrustedNetwork"
                        },
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "UTMInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "UTMRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "UTMLaunchConfiguration": {
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda",
                        "Ebs": {
                            "VolumeSize": "100"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "UTMInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "LicenseType"
                        }
                    ]
                },
                "InstanceType": "m3.medium",
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "UTMSecurityGroup"
                    },
                    {
                        "Ref": "TrustedSecurityGroup"
                    },
                    {
                        "Ref": "UntrustedSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "date +'UserData start %c' > /tmp/user_data.log\n",
                                "echo 'version: \"0.1.0\"' >> /etc/cloud/user_data.yml\n",
                                "echo 'instance_role: \"ha\"' >> /etc/cloud/user_data.yml\n",
                                "echo 'deployment_type: \"",
                                "ha_standalone",
                                "\"' >> /etc/cloud/user_data.yml\n",
                                "echo 'license_pool: \"",
                                {
                                    "Ref": "LicensePool"
                                },
                                "\"' >> /etc/cloud/user_data.yml\n",
                                "echo 'region: \"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\"' >> /etc/cloud/user_data.yml\n",
                                "cc=`/usr/local/bin/confd-client.plx country_name_to_code \"",
                                {
                                    "Ref": "Country"
                                },
                                "\"`\n",
                                "echo \"{ hostname => '",
                                {
                                    "Ref": "Hostname"
                                },
                                "', organization => '",
                                {
                                    "Ref": "Organization"
                                },
                                "', city => '",
                                {
                                    "Ref": "City"
                                },
                                "', country => '$cc', email => '",
                                {
                                    "Ref": "Email"
                                },
                                "', password => '",
                                {
                                    "Ref": "AdminPassword"
                                },
                                "' }\" > /var/confd/var/storage/setup.ph\n",
                                "/etc/init.d/confd restart\n",
                                "sleep 5\n",
                                "echo 'elastic_ip: \"",
                                {
                                    "Fn::If": [
                                        "AllocateElasticIP",
                                        {
                                            "Ref": "IPAddress"
                                        },
                                        {
                                            "Ref": "ExistingElasticIP"
                                        }
                                    ]
                                },
                                "\"' >> /etc/cloud/user_data.yml\n",
                                "echo 's3_bucket: \"",
                                {
                                    "Fn::If": [
                                        "CreateS3Bucket",
                                        {
                                            "Ref": "S3Bucket"
                                        },
                                        {
                                            "Ref": "ExistingS3Bucket"
                                        }
                                    ]
                                },
                                "\"' >> /etc/cloud/user_data.yml\n",
                                "echo 'stack_name: \"",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "\"' >> /etc/cloud/user_data.yml\n",
                                "date +'UserData confd config start %c' >> /tmp/user_data.log\n",
                                "echo '{' > /tmp/user_data.config\n",
                                "echo '\"cloudwatch\" => { \"status\" => 1 },' >> /tmp/user_data.config\n",
                                "echo '\"confd\" => { \"backup\" => 1, \"backup_interval\" => 300, \"restore\" => 1, \"restore_done\" => 0 },' >> /tmp/user_data.config\n",
                                "echo '\"instance_role\" => \"ha_standalone\",' >> /tmp/user_data.config\n",
                                "echo '\"postgres\" => { \"archive_timeout\" => 300, \"backup\" => 1, \"base_backup_interval\" => 3600, \"restore\" => 1 },' >> /tmp/user_data.config\n",
                                "echo '\"syslog\" => { \"backup\" => 1, \"restore\" => 1, \"restore_period\" => 8 },' >> /tmp/user_data.config\n",
                                "echo '\"s3_bucket\" => \"",
                                {
                                    "Fn::If": [
                                        "CreateS3Bucket",
                                        {
                                            "Ref": "S3Bucket"
                                        },
                                        {
                                            "Ref": "ExistingS3Bucket"
                                        }
                                    ]
                                },
                                "\",' >> /tmp/user_data.config\n",
                                "echo '\"stack_name\" => \"",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "\",' >> /tmp/user_data.config\n",
                                "echo '\"elastic_ip\" => \"",
                                {
                                    "Fn::If": [
                                        "AllocateElasticIP",
                                        {
                                            "Ref": "IPAddress"
                                        },
                                        {
                                            "Ref": "ExistingElasticIP"
                                        }
                                    ]
                                },
                                "\",' >> /tmp/user_data.config\n",
                                "echo '\"trusted_network\" => \"",
                                {
                                    "Ref": "TrustedNetwork"
                                },
                                "\"' >> /tmp/user_data.config\n",
                                "echo '}' >> /tmp/user_data.config\n",
                                "/usr/local/bin/confd-client.plx -noquote -stdin set \\'ha\\' \\'aws\\' < /tmp/user_data.config >> /tmp/user_data.log\n",
                                "date +'UserData confd config end %c' >> /tmp/user_data.log\n",
                                "date +'UserData ha aws start %c' >> /tmp/user_data.log\n",
                                "/etc/init.d/ha_aws start\n",
                                "date +'UserData awslogs agent setup start %c' >> /tmp/user_data.log\n",
                                "/usr/local/bin/awslogs-agent-setup.py -n -r ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "  -c /etc/cloud/awslogs.conf >> /tmp/user_data.log\n",
                                "date +'UserData awslogs agent setup end %c' >> /tmp/user_data.log\n",
                                "/usr/local/bin/confd-client.plx trigger ha_aws\n",
                                "exit 0\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "UTMRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "iam:PassRole",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "NotAction": "iam:*",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "cloudformation:UpdateStack",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "UTMPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "UTMScalingGroup": {
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "AvailabilityZone1"
                    },
                    {
                        "Ref": "AvailabilityZone2"
                    }
                ],
                "DesiredCapacity": "1",
                "LaunchConfigurationName": {
                    "Ref": "UTMLaunchConfiguration"
                },
                "MaxSize": "2",
                "MinSize": "0",
                "NotificationConfigurations": [
                    {
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                        ],
                        "TopicARN": {
                            "Ref": "UnhealthyTopic"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": true,
                        "Value": "HA-UTM"
                    }
                ],
                "TerminationPolicies": [
                    "NewestInstance",
                    "Default"
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet1"
                    },
                    {
                        "Ref": "Subnet2"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": 1,
                    "MinInstancesInService": "1",
                    "PauseTime": "PT5M"
                }
            }
        },
        "UTMSecurityGroup": {
            "Properties": {
                "GroupDescription": "Identifying security group",
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "UnhealthyTopic": {
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "Email"
                        },
                        "Protocol": "email"
                    }
                ]
            },
            "Type": "AWS::SNS::Topic"
        },
        "UntrustedSecurityGroup": {
            "Properties": {
                "GroupDescription": "Untrusted network restricted from accessing port 22 and 8080.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "12",
                        "IpProtocol": "tcp",
                        "ToPort": "21"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "23",
                        "IpProtocol": "tcp",
                        "ToPort": "8079"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "8081",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "3410",
                        "IpProtocol": "udp",
                        "ToPort": "3410"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}
