{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "AllocateElasticIP": {
            "Fn::Equals": [
                {
                    "Ref": "optionalExistingElasticIP"
                },
                ""
            ]
        },
        "CreateS3Bucket": {
            "Fn::Equals": [
                {
                    "Ref": "optionalExistingS3Bucket"
                },
                ""
            ]
        },
        "EnableLicensePool": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "optionalLicensePool"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseRegionMap" : {
            "Fn::Equals": [
                    {"Ref": "awsAMI"}, "autodetect"
            ]
        }
    },
    "Description": "Scalable UTM cloud formation template",
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "BYOL": "ami-64f36864",
                "Hourly": "ami-fa6ff6fa"
            },
            "ap-southeast-1": {
                "BYOL": "ami-b89187ea",
                "Hourly": "ami-5a3b2d08"
            },
            "ap-southeast-2": {
                "BYOL": "ami-af6e2695",
                "Hourly": "ami-8d2961b7"
            },
            "eu-central-1": {
                "BYOL": "ami-50acae4d",
                "Hourly": "ami-68f6f475"
            },
            "eu-west-1": {
                "BYOL": "ami-7b9baf0c",
                "Hourly": "ami-43ac9934"
            },
            "sa-east-1": {
                "BYOL": "ami-d33cabce",
                "Hourly": "ami-0f70e712"
            },
            "us-east-1": {
                "BYOL": "ami-9bdf9cfe",
                "Hourly": "ami-0950116c"
            },
            "us-west-1": {
                "BYOL": "ami-c925e38d",
                "Hourly": "ami-13cc0a57"
            },
            "us-west-2": {
                "BYOL": "ami-b847a28b",
                "Hourly": "ami-40bb5e73"
            }
        }
    },

    "Outputs": {
        "ConfigurationSNSTopic": {
            "Description": "The SNS topic for configuration changes.",
            "Value": {
                "Ref": "ConfdSNSTopic"
            }
        },
        "ELB": {
            "Description": "Swarm ELB",
            "Value": {
                "Ref": "ElasticLoadBalancer"
            }
        },
        "PublicIPAddress": {
            "Description": "Use this IP to connect and to forward traffic to the UTM.",
            "Value": {
                "Fn::If": [
                    "AllocateElasticIP",
                    {
                        "Ref": "IPAddress"
                    },
                    {
                        "Ref": "optionalExistingElasticIP"
                    }
                ]
            }
        },
        "QueenScalingGroup": {
            "Description": "The HA Scaling group.",
            "Value": {
                "Ref": "QueenScalingGroup"
            }
        },
        "Region": {
            "Description": "Region of the stack",
            "Value": {
                "Ref": "AWS::Region"
            }
        },
        "S3Bucket": {
            "Description": "The S3 Bucket.",
            "Value": {
                "Fn::If": [
                    "CreateS3Bucket",
                    {
                        "Ref": "S3Bucket"
                    },
                    {
                        "Ref": "optionalExistingS3Bucket"
                    }
                ]
            }
        },
        "SwarmScalingGroup": {
            "Description": "The Swarm scaling group.",
            "Value": {
                "Ref": "SwarmScalingGroup"
            }
        },
        "VPCID": {
            "Description": "The VPC of the Swarm",
            "Value": {
                "Ref": "awsVPCID"
            }
        }
    },
    "Parameters": {
        "awsAvailabilityZone1": {
            "Description": "Please provide an Availability Zone.",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "awsAvailabilityZone2": {
            "Description": "Please provide another (different) Availability Zone.",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "awsGatewayID": {
            "Description": "The Gateway of the VPC.",
            "Type": "String"
        },
        "awsKeyName": {
            "Default": "",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "awsAMI" : {
            "Description" : "The UTM AMI with cloud capabilities. With autodetect latest ami is used based on the license type",
            "Type" : "String",
            "Default" : "autodetect"
        },
        "awsLicenseType": {
            "AllowedValues": [
                "Hourly",
                "BYOL"
            ],
            "Description": "Bring or own license or hourly billing. This parameter has no effect, If the awsAMI parameter is set to an AMI ID.",
            "Type": "String"
        },
        "awsSubnetIPBlocks": {
            "Description": "Four subnet CIDR blocks with the VPC.",
            "Type": "CommaDelimitedList"
        },
        "awsTrustedNetwork": {
            "Description": "Trusted network. Only connections from this network are allowed to ports 22 and 8080. E.g 92.198.130.0/24. To allow access from anywhere use 0.0.0.0/0",
            "Type": "String"
        },
        "awsVPCID": {
            "Description": "VPC to launch the deployment in.",
            "Type": "AWS::EC2::VPC::Id"
        },
        "basicAdminEmail": {
            "Default": "",
            "Description": "UTM admin email",
            "Type": "String"
        },
        "basicAdminPassword": {
            "Description": "UTM admin password",
            "NoEcho": true,
            "Type": "String"
        },
        "basicCity": {
            "Description": "City",
            "Type": "String"
        },
        "basicCountry": {
            "AllowedValues": [
                "Andorra",
                "United Arab Emirates",
                "Afghanistan",
                "Antigua and Barbuda",
                "Anguilla",
                "Albania",
                "Armenia",
                "Netherlands Antilles",
                "Angola",
                "Antarctica",
                "Argentina",
                "American Samoa",
                "Austria",
                "Australia",
                "Aland Islands",
                "Aruba",
                "Azerbaidjan",
                "Bosnia and Herzegovina",
                "Barbados",
                "Bangladesh",
                "Belgium",
                "Burkina Faso",
                "Bulgaria",
                "Bahrain",
                "Burundi",
                "Benin",
                "Saint Barthelemey",
                "Bermuda",
                "Brunei Darussalam",
                "Bolivia",
                "Brazil",
                "Bahamas",
                "Bhutan",
                "Bouvet Island",
                "Botswana",
                "Belarus",
                "Belize",
                "Canada",
                "Cocos Islands",
                "Congo, Democratic Rebpulic of the",
                "Central African Republic",
                "Congo",
                "Switzerland",
                "Ivory Coast",
                "Cook Islands",
                "Chile",
                "Cameroon",
                "China",
                "Colombia",
                "Costa Rica",
                "Cuba",
                "Cape Verde",
                "Christmas Island",
                "Cyprus",
                "Czech Republic",
                "Germany",
                "Djibouti",
                "Denmark",
                "Dominica",
                "Dominican Republic",
                "Algeria",
                "Ecuador",
                "Estonia",
                "Egypt",
                "Western Sahara",
                "Eritrea",
                "Spain",
                "Ethiopia",
                "Finland",
                "Fiji",
                "Falkland Islands",
                "Micronesia",
                "Faroe Islands",
                "France",
                "Gabon",
                "Great Britain",
                "Grenada",
                "Georgia",
                "French Guyana",
                "Guernsey",
                "Ghana",
                "Gibraltar",
                "Greenland",
                " Gambia",
                "Guinea",
                "Guadeloupe",
                "Equatorial Guinea",
                "Greece",
                "S. Georgia & S. Sandwich Isls.",
                "Guatemala",
                "Guam (USA)",
                "Guinea Bissau",
                "Guyana",
                "Hong Kong",
                "Heard and McDonald Islands",
                "Honduras",
                "Croatia",
                "Haiti",
                "Hungary",
                "Indonesia",
                "Ireland",
                "Israel",
                "Isle of Man",
                "India",
                "British Indian Ocean Territory",
                "Iraq",
                "Iran",
                "Iceland",
                "Italy",
                "Jersey",
                "Jamaica",
                "Jordan",
                "Japan",
                "Kenya",
                "Kyrgyz Republic (Kyrgyzstan)",
                "Cambodia, Kingdom of",
                "Kiribati",
                "Comoros",
                "Saint Kitts & Nevis Anguilla",
                "North Korea",
                "South Korea",
                "Kuwait",
                "Cayman Islands",
                "Kazakhstan",
                "Laos",
                "Lebanon",
                "Saint Lucia",
                "Liechtenstein",
                "Sri Lanka",
                "Liberia",
                "Lesotho",
                "Lithuania",
                "Luxembourg",
                "Latvia",
                "Libya",
                "Morocco",
                "Monaco",
                "Moldavia",
                "Montenegro",
                "Saint Martin (French)",
                "Madagascar",
                "Marshall Islands",
                "Macedonia",
                "Mali",
                "Myanmar",
                "Mongolia",
                "Macau",
                "Northern Mariana Islands",
                "Martinique (French)",
                "Mauritania",
                "Montserrat",
                "Malta",
                "Mauritius",
                "Maldives",
                "Malawi",
                "Mexico",
                "Malaysia",
                "Mozambique",
                "Namibia",
                "New Caledonia (French)",
                "Niger",
                "Norfolk Island",
                "Nigeria",
                "Nicaragua",
                "Netherlands",
                "Norway",
                "Nepal",
                "Nauru",
                "Niue",
                "New Zealand",
                "Oman",
                "Panama",
                "Peru",
                "Polynesia (French)",
                "Papua New Guinea",
                "Philippines",
                "Pakistan",
                "Poland",
                "Saint Pierre and Miquelon",
                "Pitcairn Island",
                "Puerto Rico",
                "Palestinian Territory (Occupied)",
                "Portugal",
                "Palau",
                "Paraguay",
                "Qatar",
                "Reunion (French)",
                "Romania",
                "Serbia",
                "Russian Federation",
                "Rwanda",
                "Saudi Arabia",
                "Solomon Islands",
                "Seychelles",
                "Sudan",
                "Sweden",
                "Singapore",
                "Saint Helena",
                "Slovenia",
                "Svalbard Jan Mayen Islands",
                "Slovak Republic",
                "Sierra Leone",
                "San Marino",
                "Senegal",
                "Somalia",
                "Suriname",
                "Saint Tome and Principe",
                "El Salvador",
                "Syria",
                "Swaziland",
                "Turks and Caicos Islands",
                "Chad",
                "French Southern Territories",
                "Togo",
                "Thailand",
                "Tadjikistan",
                "Tokelau",
                "Timor-Leste",
                "Turkmenistan",
                "Tunisia",
                "Tonga",
                "Turkey",
                "Trinidad and Tobago",
                "Tuvalu",
                "Taiwan",
                "Tanzania",
                "Ukraine",
                "Uganda",
                "United Kingdom",
                "USA Minor Outlying Islands",
                "United States",
                "Uruguay",
                "Uzbekistan",
                "Holy See (Vatican City State)",
                "Saint Vincent & Grenadines",
                "Venezuela",
                "Virgin Islands (British)",
                "Virgin Islands (USA)",
                "Vietnam",
                "Vanuatu",
                "Wallis and Futuna Islands",
                "Samoa",
                "Yemen",
                "Mayotte",
                "South Africa",
                "Zambia",
                "Zimbabwe"
            ],
            "Description": "Country",
            "Type": "String"
        },
        "basicHostname": {
            "AllowedPattern": "^[0-9A-Za-z]{1}([A-Za-z0-9.-]*)$",
            "ConstraintDescription": "Invalid hostname. The hostname field can have a maximum of 64 characters. Hostname can only contain lower- and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number.",
            "Description": "The hostname field can have a maximum of 64 characters. Hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number.",
            "MaxLength": "64",
            "Type": "String"
        },
        "basicOrganization": {
            "Description": "Name of your Organization",
            "Type": "String"
        },
        "optionalExistingElasticIP": {
            "Default": "",
            "Description": "Optional. The Elastic IP to assign in the UTM instance. If left empty a new Elastic IP will be allocated automatically.",
            "Type": "String"
        },
        "optionalExistingS3Bucket": {
            "Default": "",
            "Description": "Optional. The S3 Bucket to store and restore backups. If left empty a new bucket will be created automatically.",
            "Type": "String"
        },
        "optionalLicensePool": {
            "Default": "",
            "Description": "Optional. S3 bucket where the licenses are stored",
            "Type": "String"
        }
    },
    "Resources": {
        "ConfdSNSTopic": {
            "Type": "AWS::SNS::Topic"
        },
        "ElasticLoadBalancer": {
            "DependsOn": "QueenRole",
            "Metadata": {
                "waf": [
                    "elb"
                ]
            },
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "5",
                    "Target": "TCP:80",
                    "Timeout": "2",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "TCP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "SwarmSubnet1"
                    },
                    {
                        "Ref": "SwarmSubnet2"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "IPAddress": {
            "DependsOn": [
                "QueenRole"
            ],
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "InboundDynamicPorts1SwarmNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "500"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPSSwarmNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "200"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPSwarmNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundSSHSwarmNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": {
                    "Ref": "awsTrustedNetwork"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "400"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundTCPQueenNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "QueenNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundUDPQueenNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "QueenNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "200"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "LoadBalancerReceiverSecurityGroup": {
            "Metadata": {
                "waf": [
                    "frontend-security-group"
                ]
            },
            "Properties": {
                "GroupDescription": "Group for the receivers of the ElasticLoadBalancer",
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LoadBalancerSecurityGroup": {
            "Metadata": {
                "waf": [
                    "elb-security-group"
                ]
            },
            "Properties": {
                "GroupDescription": "Enable HTTP access on port 8080",
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "OutBoundDynamicPortSwarmNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundHTTPSSwarmNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "200"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundHTTPSwarmNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "300"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundTCPQueenNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "QueenNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "150"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundUDPQueenNetworkAclEntry": {
            "DependsOn": "QueenRole",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "QueenNetworkAcl"
                },
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "250"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "QueenInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "QueenRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "QueenLaunchConfiguration": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "queen_node": [
                            "queen_config"
                        ]
                    },
                    "queen_config": {
                        "files": {
                            "/etc/cloud/inf-resources.yml": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "security_groups:\n",
                                            "  ",
                                            {
                                                "Ref": "QueenSecurityGroup"
                                            },
                                            ":\n",
                                            "    incoming:\n",
                                            "      - from_port: 514\n",
                                            "        to_port: 514\n",
                                            "        protocol: UDP\n",
                                            "        source: ",
                                            {
                                                "Ref": "SwarmSecurityGroup"
                                            },
                                            "\n",
                                            "    outgoing:\n",
                                            "      - from_port: 0\n",
                                            "        to_port: 65535\n",
                                            "        protocol: TCP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "      - from_port: 0\n",
                                            "        to_port: 65535\n",
                                            "        protocol: UDP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "  ",
                                            {
                                                "Ref": "TrustedNetworkGroup"
                                            },
                                            ":\n",
                                            "    incoming:\n",
                                            "      - from_port: 0\n",
                                            "        to_port: 65535\n",
                                            "        protocol: TCP\n",
                                            "        source: ",
                                            {
                                                "Ref": "awsTrustedNetwork"
                                            },
                                            "\n",
                                            "  ",
                                            {
                                                "Ref": "UntrustedGroup"
                                            },
                                            ":\n",
                                            "    incoming:\n",
                                            "      - from_port: 12\n",
                                            "        to_port: 21\n",
                                            "        protocol: TCP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "      - from_port: 23\n",
                                            "        to_port: 8079\n",
                                            "        protocol: TCP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "      - from_port: 8081\n",
                                            "        to_port: 65535\n",
                                            "        protocol: TCP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "      - from_port: 3410\n",
                                            "        to_port: 3410\n",
                                            "        protocol: UDP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "  ",
                                            {
                                                "Ref": "SwarmSecurityGroup"
                                            },
                                            ":\n",
                                            "    incoming:\n",
                                            "      - from_port: 6500\n",
                                            "        to_port: 6500\n",
                                            "        protocol: TCP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "    outgoing:\n",
                                            "      - from_port: 443\n",
                                            "        to_port: 443\n",
                                            "        protocol: TCP\n",
                                            "        source: 0.0.0.0/0\n",
                                            "      - from_port: 514\n",
                                            "        to_port: 514\n",
                                            "        protocol: UDP\n",
                                            "        source: ",
                                            {
                                                "Ref": "QueenSecurityGroup"
                                            },
                                            "\n",
                                            "acls:\n",
                                            "  ",
                                            {
                                                "Ref": "QueenNetworkAcl"
                                            },
                                            ":\n",
                                            "    incoming:\n",
                                            "      - from_port: 0\n",
                                            "        to_port: 65535\n",
                                            "        protocol: 6\n",
                                            "        source: 0.0.0.0/0\n",
                                            "        action: ALLOW\n",
                                            "      - from_port: 0\n",
                                            "        to_port: 65535\n",
                                            "        protocol: 17\n",
                                            "        source: 0.0.0.0/0\n",
                                            "        action: ALLOW\n",
                                            "    outgoing:\n",
                                            "      - from_port: 0\n",
                                            "        to_port: 65535\n",
                                            "        protocol: 6\n",
                                            "        source: 0.0.0.0/0\n",
                                            "        action: ALLOW\n",
                                            "      - from_port: 0\n",
                                            "        to_port: 65535\n",
                                            "        protocol: 17\n",
                                            "        source: 0.0.0.0/0\n",
                                            "        action: ALLOW\n",
                                            "  ",
                                            {
                                                "Ref": "SwarmNetworkAcl"
                                            },
                                            ":\n",
                                            "    incoming:\n",
                                            "      - from_port: 22\n",
                                            "        to_port: 22\n",
                                            "        protocol: 6\n",
                                            "        source: ",
                                            {
                                                "Ref": "awsTrustedNetwork"
                                            },
                                            "\n",
                                            "        action: ALLOW\n",
                                            "      - from_port: 1024\n",
                                            "        to_port: 65535\n",
                                            "        protocol: 6\n",
                                            "        source: 0.0.0.0/0\n",
                                            "        action: ALLOW\n",
                                            "    outgoing:\n",
                                            "      - from_port: 514\n",
                                            "        to_port: 514\n",
                                            "        protocol: 17\n",
                                            "        source: 0.0.0.0\n",
                                            "        action: ALLOW\n",
                                            "      - from_port: 443\n",
                                            "        to_port: 443\n",
                                            "        protocol: 6\n",
                                            "        source: 0.0.0.0/0\n",
                                            "        action: ALLOW\n",
                                            "      - from_port: 1024\n",
                                            "        to_port: 65535\n",
                                            "        protocol: 6\n",
                                            "        source: 0.0.0.0/0\n",
                                            "        action: ALLOW\n",
                                            "elbs:\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "0644",
                                "owner": "root"
                            },
                            "/etc/cloud/resource-catalog.yml": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "elb: ",
                                            {
                                                "Ref": "ElasticLoadBalancer"
                                            },
                                            "\n",
                                            "incoming_acl: ",
                                            {
                                                "Ref": "SwarmNetworkAcl"
                                            },
                                            "\n",
                                            "outgoing_acl: ",
                                            {
                                                "Ref": "SwarmNetworkAcl"
                                            },
                                            "\n",
                                            "elb_security_group: ",
                                            {
                                                "Ref": "LoadBalancerSecurityGroup"
                                            },
                                            "\n",
                                            "elb_destination_security_group: ",
                                            {
                                                "Ref": "SwarmSecurityGroup"
                                            },
                                            "\n",
                                            "frontend_security_group: ",
                                            {
                                                "Ref": "LoadBalancerReceiverSecurityGroup"
                                            },
                                            "\n",
                                            "backend_security_group: ",
                                            {
                                                "Ref": "SwarmSecurityGroup"
                                            },
                                            "\n",
                                            "\n",
                                            "infrastructure:\n",
                                            "  security_groups:\n",
                                            "    - ",
                                            {
                                                "Ref": "TrustedNetworkGroup"
                                            },
                                            "\n",
                                            "    - ",
                                            {
                                                "Ref": "UntrustedGroup"
                                            },
                                            "\n",
                                            "    - ",
                                            {
                                                "Ref": "QueenSecurityGroup"
                                            },
                                            "\n",
                                            "    - ",
                                            {
                                                "Ref": "SwarmSecurityGroup"
                                            },
                                            "\n",
                                            "  acls:\n",
                                            "    - ",
                                            {
                                                "Ref": "QueenNetworkAcl"
                                            },
                                            "\n",
                                            "    - ",
                                            {
                                                "Ref": "SwarmNetworkAcl"
                                            },
                                            "\n",
                                            "  elbs:\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "0644",
                                "owner": "root"
                            },
                            "/etc/cloud/user_data.yml": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "version: 0.1.0\n",
                                            "instance_role: queen\n",
                                            "deployment_type: autoscaling\n",
                                            "license_pool: ",
                                            {
                                                "Ref": "optionalLicensePool"
                                            },
                                            "\n",
                                            "s3_bucket: ",
                                            {
                                                "Fn::If": [
                                                    "CreateS3Bucket",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    {
                                                        "Ref": "optionalExistingS3Bucket"
                                                    }
                                                ]
                                            },
                                            "\n",
                                            "sns_topic: ",
                                            {
                                                "Ref": "ConfdSNSTopic"
                                            },
                                            "\n",
                                            "config_prefix: config_management/\n",
                                            "elastic_ip: ",
                                            {
                                                "Fn::If": [
                                                    "AllocateElasticIP",
                                                    {
                                                        "Ref": "IPAddress"
                                                    },
                                                    {
                                                        "Ref": "optionalExistingElasticIP"
                                                    }
                                                ]
                                            },
                                            "\n",
                                            "stack_name: ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region: ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "0644",
                                "owner": "root"
                            },
                            "/tmp/user_data.config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{\n",
                                            "\"cloudwatch\" => { \"status\" => 1 },\n",
                                            "\"confd\" => { \"backup\" => 1, \"backup_interval\" => 300, \"restore\" => 1, \"restore_done\" => 0 },\n",
                                            "\"instance_role\" => \"ha_standalone\",\n",
                                            "\"postgres\" => { \"archive_timeout\" => 300, \"backup\" => 1, \"base_backup_interval\" => 3600, \"restore\" => 1 },\n",
                                            "\"syslog\" => { \"backup\" => 1, \"restore\" => 1, \"restore_period\" => 8 },\n",
                                            "\"s3_bucket\" => \"",
                                            {
                                                "Fn::If": [
                                                    "CreateS3Bucket",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    {
                                                        "Ref": "optionalExistingS3Bucket"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "\"stack_name\" => \"",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\",\n",
                                            "\"elastic_ip\" => \"",
                                            {
                                                "Fn::If": [
                                                    "AllocateElasticIP",
                                                    {
                                                        "Ref": "IPAddress"
                                                    },
                                                    {
                                                        "Ref": "optionalExistingElasticIP"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "\"trusted_network\" => \"",
                                            {
                                                "Ref": "awsTrustedNetwork"
                                            },
                                            "\"\n",
                                            "}\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "0644",
                                "owner": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeSize": "100"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "QueenInstanceProfile"
                },
                "ImageId": {
                  "Fn::If": [
                    "UseRegionMap", {
                      "Fn::FindInMap": ["RegionMap", {
                        "Ref": "AWS::Region"
                      }, {
                        "Ref": "awsLicenseType"
                      }]
                    }, {
                      "Ref": "awsAMI"
                    }
                  ]
                },
                "InstanceType": "m3.medium",
                "KeyName": {
                    "Ref": "awsKeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "QueenSecurityGroup"
                    },
                    {
                        "Ref": "TrustedNetworkGroup"
                    },
                    {
                        "Ref": "UntrustedGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "date +'UserData start %c' > /tmp/user_data.log\n",
                                "touch /etc/no-selfmonitor/worker_config_management\n",
                                "touch /etc/no-selfmonitor/queen_config_management\n",
                                "cc=`/usr/local/bin/confd-client.plx country_name_to_code \"",
                                {
                                    "Ref": "basicCountry"
                                },
                                "\"`\n",
                                "echo \"{ hostname => '",
                                {
                                    "Ref": "basicHostname"
                                },
                                "', organization => '",
                                {
                                    "Ref": "basicOrganization"
                                },
                                "', city => '",
                                {
                                    "Ref": "basicCity"
                                },
                                "', country => '$cc', email => '",
                                {
                                    "Ref": "basicAdminEmail"
                                },
                                "', password => '",
                                {
                                    "Ref": "basicAdminPassword"
                                },
                                "' }\" > /var/confd/var/storage/setup.ph\n",
                                "/etc/init.d/confd restart\n",
                                "sleep 5\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-init -c queen_node -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r QueenLaunchConfiguration --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " >> /tmp/user_data.log 2>&1 || echo 'Failed to run cfn-init' >> /tmp/user_data.log\n",
                                "/usr/local/bin/confd-client.plx -noquote -stdin set \\'ha\\' \\'aws\\' < /tmp/user_data.config >> /tmp/user_data.log\n",
                                "date +'UserData awslogs agent setup start %c' >> /tmp/user_data.log\n",
                                "/usr/local/bin/awslogs-agent-setup.py -n -r ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "  -c /etc/cloud/awslogs.conf >> /tmp/user_data.log\n",
                                "date +'UserData awslogs agent setup end %c' >> /tmp/user_data.log\n",
                                "date +'UserData aws deamons start %c' >> /tmp/user_data.log\n",
                                "/etc/init.d/ha_aws start\n",
                                "/etc/init.d/aws_resource_management start\n",
                                "date +'UserData aws deamons end %c' >> /tmp/user_data.log\n",
                                "/usr/local/bin/aws_set_sd_check disable\n",
                                "/usr/local/bin/confd-client.plx trigger ha_aws\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e 0 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource QueenScalingGroup ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "exit 0\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "QueenNetworkAcl": {
            "DependsOn": "QueenRole",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "QueenRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "iam:PassRole",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "iam:DeleteRolePolicy",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "iam:RemoveRoleFromInstanceProfile",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "iam:DeleteInstanceProfile",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "iam:DeleteRole",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "cloudformation:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "ec2:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "autoscaling:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "cloudwatch:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "elb:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "elasticloadbalancing:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "sns:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::If": [
                                                "CreateS3Bucket",
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "S3Bucket"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "optionalExistingS3Bucket"
                                                            }
                                                        ]
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::If": [
                                                "CreateS3Bucket",
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "S3Bucket"
                                                            },
                                                            "/*"
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "optionalExistingS3Bucket"
                                                            },
                                                            "/*"
                                                        ]
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::If": [
                                                "EnableLicensePool",
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "optionalLicensePool"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Ref": "AWS::NoValue"
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::If": [
                                                "EnableLicensePool",
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "optionalLicensePool"
                                                            },
                                                            "/*"
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Ref": "AWS::NoValue"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "UTMPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "QueenRoute": {
            "DependsOn": [
                "QueenRole"
            ],
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "awsGatewayID"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "QueenScalingGroup": {
            "DependsOn": [
                "ConfdSNSTopic"
            ],
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "awsAvailabilityZone1"
                    },
                    {
                        "Ref": "awsAvailabilityZone2"
                    }
                ],
                "DesiredCapacity": "1",
                "LaunchConfigurationName": {
                    "Ref": "QueenLaunchConfiguration"
                },
                "MaxSize": "2",
                "MinSize": "1",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Queen UTM",
                        "PropagateAtLaunch": true
                    }
                ],
                "TerminationPolicies": [
                    "NewestInstance"
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "QueenSubnet1"
                    },
                    {
                        "Ref": "QueenSubnet2"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "QueenSecurityGroup": {
            "Properties": {
                "GroupDescription": "Identifying security group",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "udp",
                        "ToPort": "65535"
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "QueenSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "awsAvailabilityZone1"
                },
                "CidrBlock": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "awsSubnetIPBlocks"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "QueenSubnet1NetworkAclAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "QueenNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "QueenSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "QueenSubnet1RouteTableAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "QueenSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "QueenSubnet2": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "awsAvailabilityZone2"
                },
                "CidrBlock": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "awsSubnetIPBlocks"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "QueenSubnet2NetworkAclAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "QueenNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "QueenSubnet2"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "QueenSubnet2RouteTableAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "QueenSubnet2"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "RouteTable": {
            "DependsOn": "QueenRole",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "S3Bucket": {
            "Properties": {
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "ExpirationInDays": "3",
                            "Prefix": "confd_backup",
                            "Status": "Enabled"
                        },
                        {
                            "ExpirationInDays": "3",
                            "Prefix": "postgres_basebackup",
                            "Status": "Enabled"
                        },
                        {
                            "ExpirationInDays": "3",
                            "Prefix": "postgres_wal",
                            "Status": "Enabled"
                        }
                    ]
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "SwarmCPUAlarmHigh": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SwarmScaleUpPolicy"
                    }
                ],
                "AlarmDescription": "Scale-up if CPU > 60% for 2 minutes",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "SwarmScalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "2",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "70"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "SwarmCPUAlarmLow": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SwarmScaleDownPolicy"
                    }
                ],
                "AlarmDescription": "Scale-down if CPU < 40% for 3 minutes",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "SwarmScalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "3",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "40"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "SwarmCPUAlarmVeryHigh": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SwarmScaleUpPolicy"
                    }
                ],
                "AlarmDescription": "Scale-up if CPU > 85% for 1 minute",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "SwarmScalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "1",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "85"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "SwarmLaunchConfiguration": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "swarm_node": [
                            "swarm_config",
                            "swarm_commands"
                        ]
                    },
                    "swarm_commands": {
                        "commands": {
                            "mod_rewrite_secret": {
                                "command": "sed -rie \"s/@SHARED_SECRET@/$shared_secret/\" /var/chroot-httpd/etc/httpd/vhost/httpd-sns.conf"
                            },
                            "userdata_secret": {
                                "command": "echo \"sns_secret: $shared_secret\" >> /etc/cloud/user_data.yml"
                            }
                        }
                    },
                    "swarm_config": {
                        "files": {
                            "/etc/cloud/user_data.yml": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "version: 0.1.0\n",
                                            "instance_role: worker\n",
                                            "deployment_type: autoscaling\n",
                                            "license_pool: ",
                                            {
                                                "Ref": "optionalLicensePool"
                                            },
                                            "\n",
                                            "s3_bucket: ",
                                            {
                                                "Fn::If": [
                                                    "CreateS3Bucket",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    {
                                                        "Ref": "optionalExistingS3Bucket"
                                                    }
                                                ]
                                            },
                                            "\n",
                                            "sns_topic: ",
                                            {
                                                "Ref": "ConfdSNSTopic"
                                            },
                                            "\n",
                                            "config_prefix: config_management/\n",
                                            "confd_filter: /etc/cloud/confd_filter.ph\n",
                                            "region: ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "0644",
                                "owner": "root"
                            },
                            "/var/chroot-httpd/etc/sns/sns.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sns_topic: ",
                                            {
                                                "Ref": "ConfdSNSTopic"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "0744",
                                "owner": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeSize": "100"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "WorkerInstanceProfile"
                },
                "ImageId": {
                  "Fn::If": [
                    "UseRegionMap", {
                      "Fn::FindInMap": ["RegionMap", {
                        "Ref": "AWS::Region"
                      }, {
                        "Ref": "awsLicenseType"
                      }]
                    }, {
                      "Ref": "awsAMI"
                    }
                  ]

                },
                "InstanceType": "m3.medium",
                "KeyName": {
                    "Ref": "awsKeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SwarmSecurityGroup"
                    },
                    {
                        "Ref": "TrustedNetworkGroup"
                    },
                    {
                        "Ref": "LoadBalancerReceiverSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "date +'UserData start %c' > /tmp/user_data.log\n",
                                "sed -i 's/^/#/' /etc/crontab.reporting\n",
                                "/usr/local/bin/confd-client.plx trigger crontab\n",
                                "touch /etc/no-selfmonitor/queen_config_management\n",
                                "touch /etc/no-selfmonitor/aws_resource_management\n",
                                "mkdir -p /var/chroot-httpd/etc/sns\n",
                                "export shared_secret=$(< /dev/urandom  tr -dc _A-Z-a-z-0-9 | head -c${1:-32})\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-init -c swarm_node -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r SwarmLaunchConfiguration --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " >> /tmp/user_data.log 2>&1 || echo 'Failed to run cfn-init' >> /tmp/user_data.log\n",
                                "/etc/init.d/httpd restart\n",
                                "/etc/init.d/worker_config_management start\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e 0 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource SwarmScalingGroup ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "exit 0\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "SwarmNetworkAcl": {
            "DependsOn": "QueenRole",
            "Metadata": {
                "waf": [
                    "incoming-acl",
                    "outgoing-acl"
                ]
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "SwarmRoute": {
            "DependsOn": [
                "QueenRole"
            ],
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "awsGatewayID"
                },
                "RouteTableId": {
                    "Ref": "SwarmRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "SwarmRouteTable": {
            "DependsOn": "QueenRole",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "SwarmScaleDownPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "SwarmScalingGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "SwarmScaleUpPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "SwarmScalingGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "SwarmScalingGroup": {
            "DependsOn": [
                "ConfdSNSTopic",
                "QueenScalingGroup"
            ],
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "awsAvailabilityZone1"
                    },
                    {
                        "Ref": "awsAvailabilityZone2"
                    }
                ],
                "DesiredCapacity": "2",
                "LaunchConfigurationName": {
                    "Ref": "SwarmLaunchConfiguration"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "MaxSize": "100",
                "MinSize": "2",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Worker UTM",
                        "PropagateAtLaunch": true
                    }
                ],
                "TerminationPolicies": [
                    "Default"
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SwarmSubnet1"
                    },
                    {
                        "Ref": "SwarmSubnet2"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "SwarmSecurityGroup": {
            "Metadata": {
                "wa": [
                    "elb-destination-security-group",
                    "backend-security-group"
                ]
            },
            "Properties": {
                "GroupDescription": "Identifying security group",
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SwarmSubnet1": {
            "DependsOn": "QueenRole",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "awsAvailabilityZone1"
                },
                "CidrBlock": {
                    "Fn::Select": [
                        2,
                        {
                            "Ref": "awsSubnetIPBlocks"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "SwarmSubnet1NetworkAclAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "SwarmSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "SwarmSubnet1RouteTableAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "RouteTableId": {
                    "Ref": "SwarmRouteTable"
                },
                "SubnetId": {
                    "Ref": "SwarmSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "SwarmSubnet2": {
            "DependsOn": "QueenRole",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "awsAvailabilityZone2"
                },
                "CidrBlock": {
                    "Fn::Select": [
                        3,
                        {
                            "Ref": "awsSubnetIPBlocks"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "SwarmSubnet2NetworkAclAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "SwarmNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "SwarmSubnet2"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "SwarmSubnet2RouteTableAssociation": {
            "DependsOn": "QueenRole",
            "Properties": {
                "RouteTableId": {
                    "Ref": "SwarmRouteTable"
                },
                "SubnetId": {
                    "Ref": "SwarmSubnet2"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "TrustedNetworkGroup": {
            "Properties": {
                "GroupDescription": "Enable TCP access from trusted network",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "awsTrustedNetwork"
                        },
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "UntrustedGroup": {
            "Properties": {
                "GroupDescription": "Untrusted network restricted from accessing port 22 and 8080.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "21"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "23",
                        "IpProtocol": "tcp",
                        "ToPort": "4443"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "4445",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "udp",
                        "ToPort": "65535"
                    }
                ],
                "VpcId": {
                    "Ref": "awsVPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "WorkerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "WorkerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "WorkerRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "autoscaling:Describe*",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:DescribeStackEvents",
                                        "cloudformation:DescribeStackResource",
                                        "cloudformation:DescribeStackResources",
                                        "cloudformation:GetTemplate",
                                        "cloudformation:List*",
                                        "cloudwatch:Describe*",
                                        "cloudwatch:Get*",
                                        "cloudwatch:List*",
                                        "ec2:Describe*",
                                        "elasticloadbalancing:Describe*",
                                        "SNS:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "s3:List*",
                                        "s3:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::If": [
                                                "CreateS3Bucket",
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "S3Bucket"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "optionalExistingS3Bucket"
                                                            }
                                                        ]
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "Fn::If": [
                                                "CreateS3Bucket",
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "S3Bucket"
                                                            },
                                                            "/*"
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "optionalExistingS3Bucket"
                                                            },
                                                            "/*"
                                                        ]
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "WorkerPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
