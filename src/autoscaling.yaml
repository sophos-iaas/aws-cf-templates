---
AWSTemplateFormatVersion: '2010-09-09'
Description: Scalable UTM CloudFormation template
Parameters:
  awsAMI:
    Description: With autodetect latest AMI is used based on the license type.
    Type: String
    Default: autodetect
  awsLicenseType:
    Description: Bring Your Own License (BYOL) or hourly billing licensing type. This parameter has no effect if the AMI parameter is set to an AMI ID.
    Type: String
    AllowedValues:
    - Hourly
    - BYOL
    Default: Hourly
  utmControllerInstanceSize:
    Description: Default selects m4.large if available in your region, m3.large otherwise.
    Type: String
    Default: default
  utmWorkerInstanceSize:
    Description: Default selects m3.medium if available in your region, c4.large otherwise.
    Type: String
    Default: default
  awsAvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Please provide an Availability Zone.
  awsAvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Please provide another (different) Availability Zone.
  awsNetworkPrefix:
    Description: Please provide an available /16 CIDR block to be used by the VPC. Only the first two octets are required. For example for the network 10.6.0.0/16 you should provide 10.6
    Type: String
    Default: '10.15'
  awsTrustedNetwork:
    Description: Only connections from this network are allowed to ports 22 and 4444. E.g. 92.198.130.0/24. To allow access from anywhere use 0.0.0.0/0
    Type: String
  optionalExistingElasticIP:
    Description: Elastic IP to assign to the UTM instance. If left empty a new Elastic IP will be allocated automatically.
    Type: String
    Default: ''
  optionalExistingS3Bucket:
    Description: S3 Bucket to store and restore backups. If left empty a new Bucket will be created automatically.
    Type: String
    Default: ''
  optionalLicensePool:
    Description: In case of a BYOL scenario the license is automatically selected from this S3 Bucket (works only if there is at least one running UTM instance already using this license). If left empty the license can be installed using webadmin.
    Type: String
    Default: ''
  basicHostname:
    Description: The hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number (max. 64 characters).
    Type: String
    MaxLength: '64'
    AllowedPattern: "^[0-9A-Za-z]{1}([A-Za-z0-9.-]*)$"
    ConstraintDescription: Invalid hostname. The hostname can only contain lower and uppercase letters, numbers, dots(.), dashes(-) and needs to begin with a letter or a number (max. 64 characters).
  basicAdminEmail:
    Default: ''
    Type: String
  basicAdminPassword:
    Type: String
    NoEcho: 'True'
  basicOrganization:
    Type: String
  basicCity:
    Type: String
  basicCountry:
    Type: String
    AllowedValues:
    - Andorra
    - United Arab Emirates
    - Afghanistan
    - Antigua and Barbuda
    - Anguilla
    - Albania
    - Armenia
    - Netherlands Antilles
    - Angola
    - Antarctica
    - Argentina
    - American Samoa
    - Austria
    - Australia
    - Aland Islands
    - Aruba
    - Azerbaidjan
    - Bosnia and Herzegovina
    - Barbados
    - Bangladesh
    - Belgium
    - Burkina Faso
    - Bulgaria
    - Bahrain
    - Burundi
    - Benin
    - Saint Barthelemey
    - Bermuda
    - Brunei Darussalam
    - Bolivia
    - Brazil
    - Bahamas
    - Bhutan
    - Bouvet Island
    - Botswana
    - Belarus
    - Belize
    - Canada
    - Cocos Islands
    - Congo, Democratic Rebpulic of the
    - Central African Republic
    - Congo
    - Switzerland
    - Ivory Coast
    - Cook Islands
    - Chile
    - Cameroon
    - China
    - Colombia
    - Costa Rica
    - Cuba
    - Cape Verde
    - Christmas Island
    - Cyprus
    - Czech Republic
    - Germany
    - Djibouti
    - Denmark
    - Dominica
    - Dominican Republic
    - Algeria
    - Ecuador
    - Estonia
    - Egypt
    - Western Sahara
    - Eritrea
    - Spain
    - Ethiopia
    - Finland
    - Fiji
    - Falkland Islands
    - Micronesia
    - Faroe Islands
    - France
    - Gabon
    - Great Britain
    - Grenada
    - Georgia
    - French Guyana
    - Guernsey
    - Ghana
    - Gibraltar
    - Greenland
    - Gambia
    - Guinea
    - Guadeloupe
    - Equatorial Guinea
    - Greece
    - S. Georgia & S. Sandwich Isls.
    - Guatemala
    - Guam (USA)
    - Guinea Bissau
    - Guyana
    - Hong Kong
    - Heard and McDonald Islands
    - Honduras
    - Croatia
    - Haiti
    - Hungary
    - Indonesia
    - Ireland
    - Israel
    - Isle of Man
    - India
    - British Indian Ocean Territory
    - Iraq
    - Iran
    - Iceland
    - Italy
    - Jersey
    - Jamaica
    - Jordan
    - Japan
    - Kenya
    - Kyrgyz Republic (Kyrgyzstan)
    - Cambodia, Kingdom of
    - Kiribati
    - Comoros
    - Saint Kitts & Nevis Anguilla
    - North Korea
    - South Korea
    - Kuwait
    - Cayman Islands
    - Kazakhstan
    - Laos
    - Lebanon
    - Saint Lucia
    - Liechtenstein
    - Sri Lanka
    - Liberia
    - Lesotho
    - Lithuania
    - Luxembourg
    - Latvia
    - Libya
    - Morocco
    - Monaco
    - Moldavia
    - Montenegro
    - Saint Martin (French)
    - Madagascar
    - Marshall Islands
    - Macedonia
    - Mali
    - Myanmar
    - Mongolia
    - Macau
    - Northern Mariana Islands
    - Martinique (French)
    - Mauritania
    - Montserrat
    - Malta
    - Mauritius
    - Maldives
    - Malawi
    - Mexico
    - Malaysia
    - Mozambique
    - Namibia
    - New Caledonia (French)
    - Niger
    - Norfolk Island
    - Nigeria
    - Nicaragua
    - Netherlands
    - Norway
    - Nepal
    - Nauru
    - Niue
    - New Zealand
    - Oman
    - Panama
    - Peru
    - Polynesia (French)
    - Papua New Guinea
    - Philippines
    - Pakistan
    - Poland
    - Saint Pierre and Miquelon
    - Pitcairn Island
    - Puerto Rico
    - Palestinian Territory (Occupied)
    - Portugal
    - Palau
    - Paraguay
    - Qatar
    - Reunion (French)
    - Romania
    - Serbia
    - Russian Federation
    - Rwanda
    - Saudi Arabia
    - Solomon Islands
    - Seychelles
    - Sudan
    - Sweden
    - Singapore
    - Saint Helena
    - Slovenia
    - Svalbard Jan Mayen Islands
    - Slovak Republic
    - Sierra Leone
    - San Marino
    - Senegal
    - Somalia
    - Suriname
    - Saint Tome and Principe
    - El Salvador
    - Syria
    - Swaziland
    - Turks and Caicos Islands
    - Chad
    - French Southern Territories
    - Togo
    - Thailand
    - Tadjikistan
    - Tokelau
    - Timor-Leste
    - Turkmenistan
    - Tunisia
    - Tonga
    - Turkey
    - Trinidad and Tobago
    - Tuvalu
    - Taiwan
    - Tanzania
    - Ukraine
    - Uganda
    - United Kingdom
    - USA Minor Outlying Islands
    - United States
    - Uruguay
    - Uzbekistan
    - Holy See (Vatican City State)
    - Saint Vincent & Grenadines
    - Venezuela
    - Virgin Islands (British)
    - Virgin Islands (USA)
    - Vietnam
    - Vanuatu
    - Wallis and Futuna Islands
    - Samoa
    - Yemen
    - Mayotte
    - South Africa
    - Zambia
    - Zimbabwe
  awsKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access.
    Type: AWS::EC2::KeyPair::KeyName
    Default: ''
  debugLogs:
    Description: Enable debug logging on the UTM instances (0 to disable; 1 to enable)
    Type: String
    MinLength: "1"
    MaxLength: "1"
    AllowedPattern: "^[0-1]$"
    Default: "0"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Instance Configuration
      Parameters:
      - awsAMI
      - awsLicenseType
      - utmControllerInstanceSize
      - utmWorkerInstanceSize
    - Label:
        default: UTM Infrastructure Configuration
      Parameters:
      - awsAvailabilityZone1
      - awsAvailabilityZone2
      - awsNetworkPrefix
      - awsTrustedNetwork
      - optionalExistingElasticIP
      - optionalExistingS3Bucket
      - optionalLicensePool
    - Label:
        default: Settings for Initial UTM Setup
      Parameters:
      - basicHostname
      - basicAdminEmail
      - basicAdminPassword
      - basicOrganization
      - basicCity
      - basicCountry
      - awsKeyName
    ParameterLabels:
      awsAMI:
        default: UTM AMI
      awsLicenseType:
        default: License Type
      utmControllerInstanceSize:
        default: Instance Size of UTM Controller
      utmWorkerInstanceSize:
        default: Instance Size of UTM Worker
      awsAvailabilityZone1:
        default: Availability Zone 1
      awsAvailabilityZone2:
        default: Availability Zone 2
      awsNetworkPrefix:
        default: Prefix for VPC CIDR Block
      awsTrustedNetwork:
        default: Trusted Network CIDR
      optionalExistingElasticIP:
        default: Existing Elastic IP (optional)
      optionalExistingS3Bucket:
        default: S3 Bucket for UTM Synchronization and Backup (optional)
      optionalLicensePool:
        default: S3 Bucket Containing Licenses (optional)
      basicHostname:
        default: Hostname
      basicAdminEmail:
        default: Admin E-Mail Address
      basicAdminPassword:
        default: Admin Password
      basicOrganization:
        default: Organization
      basicCity:
        default: City
      basicCountry:
        default: Country
      awsKeyName:
        default: SSH Key
Mappings:
  RegionMap: {}
Conditions:
  DetectAMI:
    Fn::Equals:
    - Ref: awsAMI
    - autodetect
  DetectWorkerInstanceSize:
    Fn::Equals:
    - Ref: utmWorkerInstanceSize
    - default
  CreateS3Bucket:
    Fn::Equals:
    - Ref: optionalExistingS3Bucket
    - ''
  AllocateElasticIP:
    Fn::Equals:
    - Ref: optionalExistingElasticIP
    - ''
  EnableLicensePool:
    Fn::Not:
    - Fn::Equals:
      - Ref: optionalLicensePool
      - ''
Resources:
  WorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: WorkerPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ec2:Describe*
            Effect: Allow
            Resource: "*"
          - Effect: Allow
            Action: sns:*
            Resource:
              Ref: ConfdSNSTopic
          - Resource:
            - Fn::If:
              - CreateS3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: S3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalExistingS3Bucket
            - Fn::If:
              - CreateS3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: S3Bucket
                  - "/*"
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalExistingS3Bucket
                  - "/*"
            Action:
            - s3:List*
            - s3:Get*
            Effect: Allow
          - Resource:
            - Fn::If:
              - CreateS3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: S3Bucket
                  - "/adbs"
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalExistingS3Bucket
                  - "/adbs"
            - Fn::If:
              - CreateS3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: S3Bucket
                  - "/adbs/*"
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalExistingS3Bucket
                  - "/adbs/*"
            Action:
            - s3:List*
            - s3:Get*
            - s3:Put*
            - s3:Delete*
            Effect: Allow
  WorkerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: WorkerRole
  QueenRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: UTMPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:PassRole
            - iam:CreateRole
            - iam:PutRolePolicy
            - iam:DeleteRolePolicy
            - iam:CreateInstanceProfile
            - iam:AddRoleToInstanceProfile
            - iam:RemoveRoleFromInstanceProfile
            - iam:DeleteInstanceProfile
            - iam:DeleteRole
            Resource: "*"
          - Action: iam:AttachRolePolicy
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:'
                - Fn::FindInMap:
                  - RegionMap
                  - Ref: AWS::Region
                  - ARN
                - ":iam::*:role/actions/EC2ActionsAccess"
            Effect: Allow
          - Effect: Allow
            Action: cloudformation:*
            Resource: "*"
          - Effect: Allow
            Action: ec2:*
            Resource: "*"
          - Effect: Allow
            Action: autoscaling:*
            Resource: "*"
          - Action: cloudwatch:*
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action: elasticloadbalancing:*
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:'
                - Fn::FindInMap:
                  - RegionMap
                  - Ref: AWS::Region
                  - ARN
                - ":elasticloadbalancing:*:*:loadbalancer/"
                - Ref: ElasticLoadBalancer
          - Effect: Allow
            Action: elasticloadbalancing:DescribeLoadBalancers
            Resource: "*"
          - Effect: Allow
            Action: sns:*
            Resource:
              Ref: ConfdSNSTopic
          - Resource:
            - Fn::If:
              - CreateS3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: S3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalExistingS3Bucket
            - Fn::If:
              - CreateS3Bucket
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: S3Bucket
                  - "/*"
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalExistingS3Bucket
                  - "/*"
            - Fn::If:
              - EnableLicensePool
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalLicensePool
              - Ref: AWS::NoValue
            - Fn::If:
              - EnableLicensePool
              - Fn::Join:
                - ''
                - - 'arn:'
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - ":s3:::"
                  - Ref: optionalLicensePool
                  - "/*"
              - Ref: AWS::NoValue
            Action:
            - s3:*
            Effect: Allow
          - Resource:
            - Fn::Join:
              - ''
              - - 'arn:'
                - Fn::FindInMap:
                  - RegionMap
                  - Ref: AWS::Region
                  - ARN
                - ":s3:::sophos-nsg-cf-dev"
            - Fn::Join:
              - ''
              - - 'arn:'
                - Fn::FindInMap:
                  - RegionMap
                  - Ref: AWS::Region
                  - ARN
                - ":s3:::sophos-nsg-cf"
            Action:
            - s3:List*
            - s3:Get*
            Effect: Allow
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:'
                - Fn::FindInMap:
                  - RegionMap
                  - Ref: AWS::Region
                  - ARN
                - ":logs:*:*:*"
  QueenInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: QueenRole
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: awsNetworkPrefix
          - 0.0/16
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  QueenSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: awsNetworkPrefix
          - 1.0/24
      AvailabilityZone:
        Ref: awsAvailabilityZone1
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: QueenSubnetAZ1
  QueenSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: awsNetworkPrefix
          - 2.0/24
      AvailabilityZone:
        Ref: awsAvailabilityZone2
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: QueenSubnetAZ2
  SwarmSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: awsNetworkPrefix
          - 4.0/24
      AvailabilityZone:
        Ref: awsAvailabilityZone1
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: SwarmSubnetAZ1
  SwarmSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Join:
        - "."
        - - Ref: awsNetworkPrefix
          - 5.0/24
      AvailabilityZone:
        Ref: awsAvailabilityZone2
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: SwarmSubnetAZ2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  QueenRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  QueenSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: QueenSubnet1
      RouteTableId:
        Ref: RouteTable
  QueenSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: QueenSubnet2
      RouteTableId:
        Ref: RouteTable
  SwarmRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  SwarmRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: SwarmRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SwarmSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SwarmSubnet1
      RouteTableId:
        Ref: SwarmRouteTable
  SwarmSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SwarmSubnet2
      RouteTableId:
        Ref: SwarmRouteTable
  IPAddress:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Condition: AllocateElasticIP
    Properties:
      Domain: vpc
  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateS3Bucket
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
        - Prefix: confd_backup
          ExpirationInDays: '3'
          Status: Enabled
        - Prefix: postgres_basebackup
          ExpirationInDays: '3'
          Status: Enabled
        - Prefix: postgres_wal
          ExpirationInDays: '3'
          Status: Enabled
        - Prefix: adbs/tmp
          ExpirationInDays: '3'
          Status: Enabled
        - Prefix: adbs/new
          ExpirationInDays: '6'
          Status: Enabled
        - Prefix: adbs/cur
          ExpirationInDays: '9'
          Status: Enabled
  ConfdSNSTopic:
    Type: AWS::SNS::Topic
  SwarmSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      waf:
      - elb-destination-security-group
      - backend-security-group
    Properties:
      GroupDescription: Identifying security group
      VpcId:
        Ref: VPC
  LoadBalancerReceiverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      waf:
      - frontend-security-group
    Properties:
      GroupDescription: Group for the receivers of the ElasticLoadBalancer
      VpcId:
        Ref: VPC
  QueenSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Identifying security group
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  TrustedNetworkGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable TCP access from trusted network
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp:
          Ref: awsTrustedNetwork
      VpcId:
        Ref: VPC
  UntrustedGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Untrusted network restricted from accessing port 22 and 4444.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '21'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '23'
        ToPort: '4443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '4445'
        ToPort: '5431'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '5433'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '3410'
        ToPort: '3410'
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPC
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      waf:
      - elb-security-group
    Properties:
      GroupDescription: Enable HTTP access on port 8080
      VpcId:
        Ref: VPC
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Metadata:
      waf:
      - elb
    Properties:
      CrossZone: 'true'
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Subnets:
      - Ref: SwarmSubnet1
      - Ref: SwarmSubnet2
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: TCP
      HealthCheck:
        Target: TCP:80
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '5'
        Timeout: '2'
    DependsOn: AttachGateway
  SwarmScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - ConfdSNSTopic
    - QueenScalingGroup
    - AttachGateway
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '2'
        MaxBatchSize: '1'
        WaitOnResourceSignals: 'true'
        PauseTime: PT15M
    Properties:
      DesiredCapacity: '2'
      MaxSize: '100'
      MinSize: '2'
      TerminationPolicies:
      - Default
      VPCZoneIdentifier:
      - Ref: SwarmSubnet1
      - Ref: SwarmSubnet2
      AvailabilityZones:
      - Ref: awsAvailabilityZone1
      - Ref: awsAvailabilityZone2
      LaunchConfigurationName:
        Ref: SwarmLaunchConfiguration
      Tags:
      - Key: Name
        Value: Worker UTM
        PropagateAtLaunch: 'true'
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
  SwarmScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: SwarmScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  SwarmScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: SwarmScalingGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"
  SwarmCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 60% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
      - Ref: SwarmScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: SwarmScalingGroup
      ComparisonOperator: GreaterThanThreshold
  SwarmCPUAlarmVeryHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 85% for 1 minute
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '85'
      AlarmActions:
      - Ref: SwarmScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: SwarmScalingGroup
      ComparisonOperator: GreaterThanThreshold
  SwarmCPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 3 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '40'
      AlarmActions:
      - Ref: SwarmScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: SwarmScalingGroup
      ComparisonOperator: LessThanThreshold
  SwarmLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: WorkerInstanceProfile
      ImageId:
        Fn::If:
        - DetectAMI
        - Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - Ref: awsLicenseType
        - Ref: awsAMI
      InstanceType:
        Fn::If:
        - DetectWorkerInstanceSize
        - Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - SwarmInstanceType
        - Ref: utmWorkerInstanceSize
      KeyName:
        Ref: awsKeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: '100'
      SecurityGroups:
      - Ref: SwarmSecurityGroup
      - Ref: TrustedNetworkGroup
      - Ref: LoadBalancerReceiverSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "date +'UserData start %c' > /tmp/user_data.log\n"
            - "sed -i 's/^/#/' /etc/crontab.reporting\n"
            - "/usr/local/bin/confd-client.plx trigger crontab\n"
            - "touch /etc/no-selfmonitor/queen_config_management\n"
            - "touch /etc/no-selfmonitor/aws_resource_management\n"
            - "mkdir -p /var/chroot-httpd/etc/sns\n"
            - "export shared_secret=$(< /dev/urandom  tr -dc _A-Z-a-z-0-9 | head -c${1:-32})\n"
            - "/usr/bin/debugmode "
            - Ref: debugLogs
            - "\n"
            - "/opt/aws/apitools/cfn-init/bin/cfn-init -c swarm_node -s "
            - Ref: AWS::StackId
            - " -r SwarmLaunchConfiguration --region "
            - Ref: AWS::Region
            - " >> /tmp/user_data.log 2>&1 || echo 'Failed to run cfn-init' >> /tmp/user_data.log\n"
            - "/etc/init.d/mdw restart && sleep 10\n"
            - "/etc/init.d/httpd restart\n"
            - "/etc/init.d/worker_config_management start\n"
            - "/opt/aws/apitools/cfn-init/bin/cfn-signal -e 0 --stack "
            - Ref: AWS::StackName
            - " --resource SwarmScalingGroup "
            - " --region "
            - Ref: AWS::Region
            - "\n"
            - "/usr/bin/pip-2.7 install awscli\n"
            - "exit 0\n"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          swarm_node:
          - swarm_config
          - swarm_commands
        swarm_config:
          files:
            "/etc/cloud/user_data.yml":
              mode: '0644'
              owner: root
              group: root
              content:
                Fn::Join:
                - ''
                - - "version: 0.1.0\n"
                  - "instance_role: worker\n"
                  - "deployment_type: autoscaling\n"
                  - "license_pool: "
                  - Ref: optionalLicensePool
                  - "\n"
                  - "s3_bucket: "
                  - Fn::If:
                    - CreateS3Bucket
                    - Ref: S3Bucket
                    - Ref: optionalExistingS3Bucket
                  - "\n"
                  - "sns_topic: "
                  - Ref: ConfdSNSTopic
                  - "\n"
                  - "config_prefix: config_management/\n"
                  - "confd_filter: /etc/cloud/confd_filter.ph\n"
                  - "region: "
                  - Ref: AWS::Region
                  - "\n"
                  - "aws_partition: "
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - "\n"
            "/var/chroot-httpd/etc/sns/sns.conf":
              mode: '0744'
              owner: root
              group: root
              content:
                Fn::Join:
                - ''
                - - "sns_topic: "
                  - Ref: ConfdSNSTopic
                  - "\n"
        swarm_commands:
          commands:
            userdata_secret:
              command: 'echo "sns_secret: $shared_secret" >> /etc/cloud/user_data.yml'
            mod_rewrite_secret:
              command: sed -rie "s/@SHARED_SECRET@/$shared_secret/" /var/chroot-httpd/etc/httpd/vhost/httpd-sns.conf
  QueenScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - ConfdSNSTopic
    - AttachGateway
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        WaitOnResourceSignals: 'true'
        PauseTime: PT15M
    Properties:
      DesiredCapacity: '1'
      MaxSize: '2'
      MinSize: '1'
      TerminationPolicies:
      - NewestInstance
      VPCZoneIdentifier:
      - Ref: QueenSubnet1
      - Ref: QueenSubnet2
      AvailabilityZones:
      - Ref: awsAvailabilityZone1
      - Ref: awsAvailabilityZone2
      LaunchConfigurationName:
        Ref: QueenLaunchConfiguration
      Tags:
      - Key: Name
        Value: Queen UTM
        PropagateAtLaunch: 'true'
  QueenLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: QueenInstanceProfile
      ImageId:
        Fn::If:
        - DetectAMI
        - Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - Ref: awsLicenseType
        - Ref: awsAMI
      InstanceType:
        Fn::If:
        - DetectWorkerInstanceSize
        - Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - QueenInstanceType
        - Ref: utmControllerInstanceSize
      KeyName:
        Ref: awsKeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: '100'
      SecurityGroups:
      - Ref: QueenSecurityGroup
      - Ref: TrustedNetworkGroup
      - Ref: UntrustedGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "date +'UserData start %c' > /tmp/user_data.log\n"
            - "touch /etc/no-selfmonitor/worker_config_management\n"
            - "touch /etc/no-selfmonitor/queen_config_management\n"
            - "cc=`/usr/local/bin/confd-client.plx country_name_to_code \""
            - Ref: basicCountry
            - "\"`\n"
            - echo "{ hostname => '
            - Ref: basicHostname
            - "', organization => '"
            - Ref: basicOrganization
            - "', city => '"
            - Ref: basicCity
            - "', country => '$cc', email => '"
            - Ref: basicAdminEmail
            - "', password => '"
            - Ref: basicAdminPassword
            - "' }\" > /var/confd/var/storage/setup.ph\n"
            - "/etc/init.d/confd restart\n"
            - "sleep 5\n"
            - "/usr/bin/debugmode "
            - Ref: debugLogs
            - "\n"
            - "/opt/aws/apitools/cfn-init/bin/cfn-init -c queen_node -s "
            - Ref: AWS::StackId
            - " -r QueenLaunchConfiguration --region "
            - Ref: AWS::Region
            - " >> /tmp/user_data.log 2>&1 || echo 'Failed to run cfn-init' >> /tmp/user_data.log\n"
            - "/usr/local/bin/confd-client.plx -noquote -stdin set \\'ha\\' \\'aws\\' < /tmp/user_data.config >> /tmp/user_data.log\n"
            - "date +'UserData awslogs agent setup start %c' >> /tmp/user_data.log\n"
            - "/usr/local/bin/awslogs-agent-setup.py -n -r "
            - Ref: AWS::Region
            - "  -c /etc/cloud/awslogs.conf >> /tmp/user_data.log\n"
            - "date +'UserData awslogs agent setup end %c' >> /tmp/user_data.log\n"
            - "date +'UserData aws deamons start %c' >> /tmp/user_data.log\n"
            - "/etc/init.d/ha_aws start\n"
            - "rm /etc/no-selfmonitor/queen_config_management\n"
            - "/etc/init.d/queen_config_management start\n"
            - "/etc/init.d/aws_resource_management start\n"
            - "date +'UserData aws deamons end %c' >> /tmp/user_data.log\n"
            - "/usr/local/bin/aws_set_sd_check disable >> /tmp/user_data.log\n"
            - "/usr/local/bin/confd-client.plx trigger ha_aws\n"
            - "/opt/aws/apitools/cfn-init/bin/cfn-signal -e 0 --stack "
            - Ref: AWS::StackName
            - " --resource QueenScalingGroup "
            - " --region "
            - Ref: AWS::Region
            - "\n"
            - "/usr/bin/sg-iaas ogw-create-cw-role >> /tmp/user_data.log 2>&1\n"
            - "exit 0\n"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          queen_node:
          - queen_config
        queen_config:
          files:
            "/etc/cloud/user_data.yml":
              mode: '0644'
              owner: root
              group: root
              content:
                Fn::Join:
                - ''
                - - "version: 0.1.0\n"
                  - "instance_role: queen\n"
                  - "deployment_type: autoscaling\n"
                  - "license_pool: "
                  - Ref: optionalLicensePool
                  - "\n"
                  - "s3_bucket: "
                  - Fn::If:
                    - CreateS3Bucket
                    - Ref: S3Bucket
                    - Ref: optionalExistingS3Bucket
                  - "\n"
                  - "sns_topic: "
                  - Ref: ConfdSNSTopic
                  - "\n"
                  - "config_prefix: config_management/\n"
                  - "elastic_ip: "
                  - Fn::If:
                    - AllocateElasticIP
                    - Ref: IPAddress
                    - Ref: optionalExistingElasticIP
                  - "\n"
                  - "stack_name: "
                  - Ref: AWS::StackName
                  - "\n"
                  - "region: "
                  - Ref: AWS::Region
                  - "\n"
                  - "aws_partition: "
                  - Fn::FindInMap:
                    - RegionMap
                    - Ref: AWS::Region
                    - ARN
                  - "\n"
                  - "debugLogs: "
                  - Ref: debugLogs
                  - "\n"
            "/tmp/user_data.config":
              mode: '0644'
              owner: root
              group: root
              content:
                Fn::Join:
                - ''
                - - "{\n"
                  - "\"cloudwatch\" => { \"status\" => 1 },\n"
                  - "\"confd\" => { \"backup\" => 1, \"backup_interval\" => 300, \"restore\" => 1, \"restore_done\" => 0 },\n"
                  - "\"instance_role\" => \"ha_standalone\",\n"
                  - "\"postgres\" => { \"archive_timeout\" => 300, \"backup\" => 1, \"base_backup_interval\" => 3600, \"restore\" => 1 },\n"
                  - "\"syslog\" => { \"backup\" => 1, \"restore\" => 1, \"restore_period\" => 8 },\n"
                  - "\"s3_bucket\" => \""
                  - Fn::If:
                    - CreateS3Bucket
                    - Ref: S3Bucket
                    - Ref: optionalExistingS3Bucket
                  - "\",\n"
                  - "\"stack_name\" => \""
                  - Ref: AWS::StackName
                  - "\",\n"
                  - "\"elastic_ip\" => \""
                  - Fn::If:
                    - AllocateElasticIP
                    - Ref: IPAddress
                    - Ref: optionalExistingElasticIP
                  - "\",\n"
                  - "\"trusted_network\" => \""
                  - Ref: awsTrustedNetwork
                  - "\"\n"
                  - "}\n"
            "/etc/cloud/resource-catalog.yml":
              mode: '0644'
              owner: root
              group: root
              content:
                Fn::Join:
                - ''
                - - "elb: "
                  - Ref: ElasticLoadBalancer
                  - "\n"
                  - "elb_security_group: "
                  - Ref: LoadBalancerSecurityGroup
                  - "\n"
                  - "elb_destination_security_group: "
                  - Ref: SwarmSecurityGroup
                  - "\n"
                  - "frontend_security_group: "
                  - Ref: LoadBalancerReceiverSecurityGroup
                  - "\n"
                  - "backend_security_group: "
                  - Ref: SwarmSecurityGroup
                  - "\n"
                  - "\n"
                  - "infrastructure:\n"
                  - "  security_groups:\n"
                  - "    - "
                  - Ref: TrustedNetworkGroup
                  - "\n"
                  - "    - "
                  - Ref: UntrustedGroup
                  - "\n"
                  - "    - "
                  - Ref: QueenSecurityGroup
                  - "\n"
                  - "    - "
                  - Ref: SwarmSecurityGroup
                  - "\n"
                  - "  elbs:\n"
            "/etc/cloud/inf-resources.yml":
              mode: '0644'
              owner: root
              group: root
              content:
                Fn::Join:
                - ''
                - - "security_groups:\n"
                  - "  "
                  - Ref: QueenSecurityGroup
                  - ":\n"
                  - "    incoming:\n"
                  - "      - from_port: 514\n"
                  - "        to_port: 514\n"
                  - "        protocol: UDP\n"
                  - "        source: "
                  - Ref: SwarmSecurityGroup
                  - "\n"
                  - "    outgoing:\n"
                  - "      - from_port: 0\n"
                  - "        to_port: 65535\n"
                  - "        protocol: TCP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "      - from_port: 0\n"
                  - "        to_port: 65535\n"
                  - "        protocol: UDP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "  "
                  - Ref: TrustedNetworkGroup
                  - ":\n"
                  - "    incoming:\n"
                  - "      - from_port: 0\n"
                  - "        to_port: 65535\n"
                  - "        protocol: TCP\n"
                  - "        source: "
                  - Ref: awsTrustedNetwork
                  - "\n"
                  - "  "
                  - Ref: UntrustedGroup
                  - ":\n"
                  - "    incoming:\n"
                  - "      - from_port: 0\n"
                  - "        to_port: 21\n"
                  - "        protocol: TCP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "      - from_port: 23\n"
                  - "        to_port: 4443\n"
                  - "        protocol: TCP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "      - from_port: 4445\n"
                  - "        to_port: 5431\n"
                  - "        protocol: TCP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "      - from_port: 5433\n"
                  - "        to_port: 65535\n"
                  - "        protocol: TCP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "      - from_port: 3410\n"
                  - "        to_port: 3410\n"
                  - "        protocol: UDP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "  "
                  - Ref: SwarmSecurityGroup
                  - ":\n"
                  - "    incoming:\n"
                  - "      - from_port: 6500\n"
                  - "        to_port: 6500\n"
                  - "        protocol: TCP\n"
                  - "        source: 0.0.0.0/0\n"
                  - "    outgoing:\n"
                  - "      - from_port: 0\n"
                  - "        to_port: 65535\n"
                  - "        protocol: ANY\n"
                  - "        source: 0.0.0.0/0\n"
                  - "elbs:\n"
Outputs:
  PublicIPAddress:
    Value:
      Fn::If:
      - AllocateElasticIP
      - Ref: IPAddress
      - Ref: optionalExistingElasticIP
    Description: Use this IP to connect and to forward traffic to the UTM.
  QueenScalingGroup:
    Value:
      Ref: QueenScalingGroup
    Description: The HA Scaling group.
  S3Bucket:
    Value:
      Fn::If:
      - CreateS3Bucket
      - Ref: S3Bucket
      - Ref: optionalExistingS3Bucket
    Description: The S3 Bucket.
  ConfigurationSNSTopic:
    Description: The SNS topic for configuration changes.
    Value:
      Ref: ConfdSNSTopic
  SwarmScalingGroup:
    Value:
      Ref: SwarmScalingGroup
    Description: The Swarm scaling group.
  VPCID:
    Value:
      Ref: VPC
    Description: The VPC of the Swarm
  Region:
    Value:
      Ref: AWS::Region
    Description: Region of the stack
  ELB:
    Value:
      Ref: ElasticLoadBalancer
    Description: Swarm ELB
