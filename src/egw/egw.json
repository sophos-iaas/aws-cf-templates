{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "VpcID": {
      "Description": "Existing VPC into which load balancer should be deployed.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "LoadBalancerSubnetID": {
      "Description": "Subnet ID for load balancer.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "KeyID": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ImageID": {
      "Description": "AMI to use for the load balancer instance.",
      "Type": "AWS::EC2::Image::Id"
    },
    "InstanceSize" : {
      "Type" : "String",
      "Default" : "m3.medium",
      "Description" : "Size of the load balancer instance. Eg. t2.micro, m3.medium, or m4.large..."
    },
    "ControllerSecurityGroup": {
      "Description": "Security group ID of the Controller node. Only SSH access to the load balancer will be allowed from this security group.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "UTMWorkerSecurityGroup": {
      "Description": "Security group ID of the instances the load balancer should balance traffic to.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "AuthToken": {
      "Description": "AuthToken for API access. This token would be used as a shared secret for API communication between load balancer and the UTMs.",
      "Type": "String"
    },
    "LoadBalancerTunnelIP": {
      "Description": "Enter a /22 network that is not being used inside the VPC. For technical reasons avoid 127.0.0.0/8 or 0.0.0.0/8 network. The network would be subnetted into /30 to build tunnels between UTM Worker nodes and load balancer. Eg. Network that could be used is 240.250.0.0.",
      "Type": "String",
      "AllowedPattern": "^([0-9]{1,3}[.]){3}[0-9]{1,3}$",
      "ConstraintDescription": "Must be IPv4 address: X.X.X.X"
    },
    "InternetGateway": {
      "Description": "IGW of the VPC the load balancer will be deployed into.",
      "Type": "String"
    },
    "ClientCIDR": {
      "Description": "CIDR containing all clients. If in doubt, use CIDR of the whole VPC.",
      "Type": "String",
      "AllowedPattern": "^([0-9]{1,3}[.]){3}[0-9]{1,3}[/]([0-9]{1,2})$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups": [
        {
          "Label": {"default": "Load Balancer Configuration"},
          "Parameters":["LoadBalancerSubnetID", "ImageID", "InstanceSize", "AuthToken", "LoadBalancerTunnelIP"]
        },{
          "Label":{ "default": "Infrastructure Information" },
          "Parameters":["VpcID", "InternetGateway","ControllerSecurityGroup", "UTMWorkerSecurityGroup", "ClientCIDR" ]
        },{
          "Label": { "default": "Credentials to access the Load Balancer"},
          "Parameters": ["KeyID"]
        }
      ],
      "ParameterLabels":{
        "VpcID": { "default": "Existing VPC" },
        "LoadBalancerSubnetID":{ "default": "Subnet ID of the Load Balancer" },
        "ImageID": { "default": "AMI of the Load Balancer" },
        "InstanceSize":{ "default": "Load Balancer instance size" },
        "AuthToken":{ "default":"Authorization token" },
        "LoadBalancerTunnelIP":{ "default":"IP address to be used for Load Balancer Tunnels" },
        "InternetGateway":{ "default": "Internet Gateway" },
        "ClientCIDR":{ "default":"CIDR of the Clients/VDIs" },
        "ControllerSecurityGroup":{"default": "Security Group of the Controller node"},
        "UTMWorkerSecurityGroup":{"default": "Security Group of the Worker nodes"},
        "KeyID": {"default":"SSH Key to access the Load Balancer"}
      }
    }
  },

  "Resources": {
    "EGWRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "InstanceIAMRole",
      "Properties": {
        "VpcId": {
          "Ref": "VpcID"
        }
      }
    },
    "EGWRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "EGWRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "LoadBalancerRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "LoadBalancerSubnetID"
        },
        "RouteTableId": {
          "Ref": "EGWRouteTable"
        }
      }
    },
    "InstanceIAM": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": [
        "InstanceIAMRole"
      ],
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceIAMRole"
          }
        ]
      }
    },
    "InstanceIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Allow-Describe-EC2-And-ReplaceRoute",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:DescribeRouteTables",
                          "ec2:DescribeSubnets",
                          "ec2:ReplaceRoute"
                      ],
                      "Resource": "*"
                  }
              ]
            }
          }
        ]
      }
    },
    "IncomingTrafficLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Incoming Traffic Group",
        "VpcId": {
          "Ref": "VpcID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": { "Ref": "ClientCIDR" }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": { "Ref": "ClientCIDR" }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": { "Ref": "ClientCIDR" }
          }
        ],
        "Tags": [
          {
            "Key" : "Name",
            "Value" : "LB Incoming Traffic"
          }
        ]
      }
    },
    "RemoteAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Remote Access Group (SSH, Control Connection)",
        "VpcId": {
          "Ref": "VpcID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "ControllerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5555",
            "ToPort": "5555",
            "SourceSecurityGroupId": {
              "Ref": "UTMWorkerSecurityGroup"
            }
          },
          {
            "IpProtocol": "47",
            "SourceSecurityGroupId": {
              "Ref": "UTMWorkerSecurityGroup"
            }
          }
        ],
        "Tags": [
          {
            "Key" : "Name",
            "Value" : "LB Access & Control"
          }
        ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "IncomingTrafficLoadBalancerSecurityGroup",
        "RemoteAccessSecurityGroup",
        "InstanceIAM"
      ],
      "Properties": {
        "ImageId": {
          "Ref": "ImageID"
        },
        "InstanceType": {
          "Ref": "InstanceSize"
        },
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [
            {
              "Ref": "IncomingTrafficLoadBalancerSecurityGroup"
            },
            {
              "Ref": "RemoteAccessSecurityGroup"
            }
          ],
          "SubnetId": {
            "Ref": "LoadBalancerSubnetID"
          }
        } ],
        "SourceDestCheck": false,
        "IamInstanceProfile": {
          "Ref": "InstanceIAM"
        },
        "KeyName": {
          "Ref": "KeyID"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "25"
            }
          }
        ],
        "SourceDestCheck": "false",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "date +'UserData start %c' > /tmp/user_data.log\n",
                "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r LoadBalancer ",
                "    --region ", { "Ref" : "AWS::Region" }, " -c InitEGW >> /tmp/user_data.log 2>&1\n",
                "initctl start egw >> /tmp/user_data.log 2>&1\n",
                "/opt/aws/bin/cfn-signal '", { "Ref" : "WaitHandle" }, "' >> /tmp/user_data.log 2>&1\n",
                "echo export AWS_DEFAULT_REGION=", { "Ref" : "AWS::Region" }, " > /etc/profile.d/aws-egw.sh\n",
                "echo export AWS_INSTANCE_ID=`/opt/aws/bin/ec2-metadata --instance-id | cut -d ' ' -f 2` >> /etc/profile.d/aws-egw.sh 2>> /tmp/user_data.log\n",
                "date +'UserData end %c' >> /tmp/user_data.log\n",
                "exit 0\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key" : "Name",
            "Value" : "LoadBalancer LB"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InitEGW" : [ "InitEGW" ]
          },
          "InitEGW": {
            "files": {
              "/etc/egw.conf":{
                "content" : { "Fn::Join" : ["", [
                    "{\n",
                    "  \"base_ip\": \"",         {"Ref": "LoadBalancerTunnelIP"}, "\",\n",
                    "  \"rest_auth_token\": \"", {"Ref": "AuthToken"},      "\"\n",
                    "}\n"
                  ]]
                }
              }
            }
          }
        }
      }
    },
    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : ["LoadBalancer"],
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Count" : "1",
        "Timeout" : "420"
      }
    },
    "LoadBalancerAutoRecover": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn" : ["LoadBalancer"],
      "Properties": {
        "AlarmDescription": "Recovering LoadBalancer when underlying hardware fails.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [{
          "Fn::Join": ["", ["arn:aws:automate:", {
            "Ref": "AWS::Region"
          }, ":ec2:recover"]]
        }],
        "Dimensions": [{
          "Name": "InstanceId",
          "Value": {
            "Ref": "LoadBalancer"
          }
        }]
      }
    },
    "LoadBalancerRestart": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn" : ["LoadBalancer"],
      "Properties": {
        "AlarmDescription": "Restarting LoadBalancer when it fails to respond.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_Instance",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [{
          "Fn::Join": ["", ["arn:aws:swf:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":action/actions/AWS_EC2.InstanceId.Reboot/1.0"]]
        }],
        "Dimensions": [ {
          "Name": "InstanceId",
          "Value": {
            "Ref": "LoadBalancer"
          }
        }]
      }
    }
  }
}
