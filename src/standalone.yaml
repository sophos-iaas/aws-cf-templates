---
AWSTemplateFormatVersion: '2010-09-09'
Description: Sophos UTM 9
Parameters:
  AMI:
    Description: Autodetect uses the latest AMI based on the pricing option you select. Otherwise, specify an AMI ID.
    Type: String
    Default: autodetect
  LicenseType:
    Description: Select between Bring Your Own License (BYOL) or pay per instance-hour (Hourly). This parameter does not take effect if you manually enter an AMI ID.
    Type: String
    AllowedValues:
    - Hourly
    - BYOL
    Default: Hourly
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of an existing VPC to launch the deployment in.
  PrivateSubnetId:
    Description: Subnet ID for private network interface.
    Type: AWS::EC2::Subnet::Id
  PublicSubnetId:
    Description: Subnet ID for public network interface.
    Type: AWS::EC2::Subnet::Id
  PrivateNetworkCIDR:
    Description: Allow all traffic from this CIDR on the private network interface.
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}"
    ConstraintDescription: 'Please specify a valid source IP range. E.g.: 192.168.2.0/24'
  PublicNetworkCIDR:
    Description: Allow all TCP traffic (except port 22 and 4444) from this CIDR on the public network interface.
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}"
    ConstraintDescription: 'Please specify a valid source IP range. Eg: 192.168.2.0/24'
  OptTrustedNetworkCIDR:
    Description: Allow all traffic (including! TCP port 22 and 4444) from this CIDR on the public network interface.
    Type: String
    Default: ''
  InstanceSize:
    Description: The default EC2 instance type is c4.large. If c4.large is not available in your region, a similar EC2 instance type will be used.
    Type: String
    Default: default
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access.
  OptExistingElasticIpId:
    Description: Association ID of an existing Elastic IP. If no ID is specified a new Elastic IP is created.
    Type: String
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Instance Configuration
      Parameters:
      - AMI
      - LicenseType
      - InstanceSize
    - Label:
        default: UTM Infrastructure Configuration
      Parameters:
      - VpcId
      - PrivateSubnetId
      - PublicSubnetId
      - PrivateNetworkCIDR
      - PublicNetworkCIDR
      - OptExistingElasticIpId
    - Label:
        default: Access Permissions
      Parameters:
      - KeyName
      - OptTrustedNetworkCIDR
    ParameterLabels:
      AMI:
        default: AMI ID (required)
      LicenseType:
        default: Pricing Option (required)
      InstanceSize:
        default: Instance Type (required)
      VpcId:
        default: VPC ID (required)
      PrivateSubnetId:
        default: Private Subnet ID (required)
      PublicSubnetId:
        default: Public Subnet ID (required)
      PrivateNetworkCIDR:
        default: Private Network CIDR (required)
      PublicNetworkCIDR:
        default: Public Network CIDR (required)
      OptExistingElasticIpId:
        default: Existing Elastic IP ID (optional)
      KeyName:
        default: SSH Key (required)
      OptTrustedNetworkCIDR:
        default: Trusted Network CIDR (optional)
Mappings:
  RegionMap: {}
Conditions:
  DetectAMI:
    Fn::Equals:
    - Ref: AMI
    - autodetect
  DetectInstanceSize:
    Fn::Equals:
    - Ref: InstanceSize
    - default
  TrustedPublicNetwork:
    Fn::Not:
    - Fn::Equals:
      - Ref: OptTrustedNetworkCIDR
      - ''
  AllocateElasticIP:
    Fn::Equals:
    - Ref: OptExistingElasticIpId
    - ''
Resources:
  SecurityGroupPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: "-1"
        CidrIp:
          Ref: PrivateNetworkCIDR
  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp:
          Ref: PublicNetworkCIDR
        FromPort: '0'
        ToPort: '21'
      - IpProtocol: tcp
        CidrIp:
          Ref: PublicNetworkCIDR
        FromPort: '23'
        ToPort: '4443'
      - IpProtocol: tcp
        CidrIp:
          Ref: PublicNetworkCIDR
        FromPort: '4445'
        ToPort: '5431'
      - IpProtocol: tcp
        CidrIp:
          Ref: PublicNetworkCIDR
        FromPort: '5433'
        ToPort: '65535'
      - IpProtocol: udp
        FromPort: '3410'
        ToPort: '3410'
        CidrIp:
          Ref: PublicNetworkCIDR
  SecurityGroupTrusted:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: "-1"
        CidrIp:
          Ref: OptTrustedNetworkCIDR
    Condition: TrustedPublicNetwork
  PublicENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        Ref: PublicSubnetId
      Description: ENI for Public Subnet
      GroupSet:
      - Fn::If:
        - TrustedPublicNetwork
        - Ref: SecurityGroupTrusted
        - Ref: SecurityGroupPublic
      - Ref: SecurityGroupPublic
      SourceDestCheck: 'false'
  PrivateENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        Ref: PrivateSubnetId
      Description: ENI for Private Subnet
      GroupSet:
      - Ref: SecurityGroupPrivate
      SourceDestCheck: 'false'
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: Private
      InstanceType:
        Fn::If:
        - DetectInstanceSize
        - Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - HAInstanceType
        - Ref: InstanceSize
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - NetworkInterfaceId:
          Ref: PublicENI
        DeviceIndex: '0'
      - NetworkInterfaceId:
          Ref: PrivateENI
        DeviceIndex: '1'
      ImageId:
        Fn::If:
        - DetectAMI
        - Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - Ref: LicenseType
        - Ref: AMI
  NewEIP:
    Type: AWS::EC2::EIP
    Condition: AllocateElasticIP
    Properties:
      Domain: vpc
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId:
        Ref: PublicENI
      AllocationId:
        Fn::If:
        - AllocateElasticIP
        - Fn::GetAtt:
          - NewEIP
          - AllocationId
        - Ref: OptExistingElasticIpId
Outputs:
  URL:
    Description: URL to the Gateway portal
    Value:
      Fn::Join:
      - ''
      - - https://
        - Fn::GetAtt:
          - Instance
          - PublicIp
        - ":4444"
