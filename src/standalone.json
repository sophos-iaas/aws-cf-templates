{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Sophos UTM 9 BYOL",
    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Existing VPC into which the UTM should be deployed."
        },
        "PrivateSubnetId": {
            "Description": "Subnet ID for private network interface.",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnetId": {
            "Description": "Subnet ID for public network interface.",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateNetworkCIDR": {
            "Description": "Allow all traffic from/to this CIDR on the private network interface.",
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}",
            "ConstraintDescription": "Please specify a valid source IP range. Eg: 192.168.2.0/24"
        },
        "PublicNetworkCIDR": {
            "Description": "Allow all traffic (except incoming TCP port 22 and 4444) from/to this CIDR on the public network interface.",
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}",
            "ConstraintDescription": "Please specify a valid source IP range. Eg: 192.168.2.0/24"
        },
        "OptTrustedNetworkCIDR": {
            "Description": "Optional: Allow all traffic (including! incoming TCP port 22 and 4444) from/to this CIDR on the public network interface.",
            "Type": "String",
            "Default": ""
        },
        "InstanceType": {
            "Description": "Type of the UTM instance.",
            "Type": "String",
            "Default": "m3.medium",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge"
            ]
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access."
        },
        "OptExistingElasticIpId": {
            "Description": "Optional: Association ID of an existing Elastic IP. If no ID is specified a new EIP is created.",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m3.medium": {
                "Arch": "64"
            },
            "m3.large": {
                "Arch": "64"
            },
            "m3.xlarge": {
                "Arch": "64"
            },
            "m3.2xlarge": {
                "Arch": "64"
            },
            "c3.large": {
                "Arch": "64"
            },
            "c3.xlarge": {
                "Arch": "64"
            },
            "c3.2xlarge": {
                "Arch": "64"
            },
            "c3.4xlarge": {
                "Arch": "64"
            },
            "c3.8xlarge": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "64": "ami-1d180577"
            },
            "us-west-1": {
                "64": "ami-3d7e015d"
            },
            "us-west-2": {
                "64": "ami-ee54a38e"
            },
            "eu-west-1": {
                "64": "ami-32cd4041"
            },
            "ap-southeast-1": {
                "64": "ami-d29044b1"
            },
            "ap-southeast-2": {
                "64": "ami-52defc31"
            },
            "ap-northeast-1": {
                "64": "ami-2d8f9243"
            },
            "sa-east-1": {
                "64": "ami-07840a6b"
            },
            "eu-central-1": {
                "64": "ami-8e01e1e1"
            }
        }
    },
    "Conditions": {
        "TrustedPublicNetwork": {
            "Fn::Not" : [{
                "Fn::Equals": [
                    {"Ref": "OptTrustedNetworkCIDR"},
                    ""
                ]
            }]
        },
        "AllocateElasticIP": {
            "Fn::Equals": [
                {"Ref": "OptExistingElasticIpId"},
                ""
            ]
        }
    },
    "Resources": {
        "SecurityGroupPrivate": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": {
                            "Ref": "PrivateNetworkCIDR"
                        }
                    }
                ]
            }
        },
        "SecurityGroupPublic": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "PublicNetworkCIDR"
                        },
                        "FromPort": "0",
                        "ToPort": "21"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "PublicNetworkCIDR"
                        },
                        "FromPort": "23",
                        "ToPort": "4443"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "PublicNetworkCIDR"
                        },
                        "FromPort": "4445",
                        "ToPort": "65535"
                    }
                ]
            }
        },
        "SecurityGroupTrusted": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": {
                            "Ref": "OptTrustedNetworkCIDR"
                        }
                    }
                ]
            },
            "Condition": "TrustedPublicNetwork"
        },
        "PublicENI": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetId"
                },
                "Description": "ENI for Public Subnet",
                "GroupSet": [
                    {"Fn::If" : [
                        "TrustedPublicNetwork",
                        {"Ref": "SecurityGroupTrusted"},
                        {"Ref" : "SecurityGroupPublic"}
                    ]},
                    {"Ref" : "SecurityGroupPublic"}
                ],
                "SourceDestCheck": "false"
            }
        },
        "PrivateENI": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetId"
                },
                "Description": "ENI for Private Subnet",
                "GroupSet": [
                    {
                        "Ref": "SecurityGroupPrivate"
                    }
                ],
                "SourceDestCheck": "false"
            }
        },
        "Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private"
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PublicENI"
                        },
                        "DeviceIndex": "0"
                    },
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrivateENI"
                        },
                        "DeviceIndex": "1"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                }
            }
        },
        "NewEIP": {
            "Type": "AWS::EC2::EIP",
            "Condition": "AllocateElasticIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "EIPAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "NetworkInterfaceId": {
                    "Ref": "PublicENI"
                },
                "AllocationId": {
                    "Fn::If": [
                        "AllocateElasticIP",
                        {"Fn::GetAtt": ["NewEIP", "AllocationId"]},
                        {"Ref": "OptExistingElasticIpId"}
                    ]
                }
            }
        }
    },
    "Outputs": {
        "URL": {
            "Description": "URL to the Gateway portal",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Instance",
                                "PublicIp"
                            ]
                        },
                        ":4444"
                    ]
                ]
            }
        }
    }
}
